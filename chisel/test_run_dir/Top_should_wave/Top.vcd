$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 J clock $end
  $var wire 1 K reset $end
  $var wire 32 L io_addr [31:0] $end
  $var wire 32 M io_inst [31:0] $end
  $var wire 1 N io_bundleCtrl_ctrlJump $end
  $var wire 1 O io_bundleCtrl_ctrlBranch $end
  $var wire 1 P io_bundleCtrl_ctrlRegWrite $end
  $var wire 1 Q io_bundleCtrl_ctrlLoad $end
  $var wire 1 R io_bundleCtrl_ctrlStore $end
  $var wire 1 S io_bundleCtrl_ctrlALUSrc $end
  $var wire 1 T io_bundleCtrl_ctrlJAL $end
  $var wire 4 U io_bundleCtrl_ctrlOP [3:0] $end
  $var wire 1 V io_bundleCtrl_ctrlSigned $end
  $var wire 2 W io_bundleCtrl_ctrlLSType [1:0] $end
  $var wire 32 X io_resultALU [31:0] $end
  $var wire 32 Y io_rs1 [31:0] $end
  $var wire 32 Z io_rs2 [31:0] $end
  $var wire 32 [ io_imm [31:0] $end
  $var wire 1 \ io_resultBranch $end
  $var wire 32 ] io_result [31:0] $end
  $scope module Top $end
   $var wire 1 J clock $end
   $var wire 1 K reset $end
   $var wire 32 L io_addr [31:0] $end
   $var wire 32 M io_inst [31:0] $end
   $var wire 1 N io_bundleCtrl_ctrlJump $end
   $var wire 1 O io_bundleCtrl_ctrlBranch $end
   $var wire 1 P io_bundleCtrl_ctrlRegWrite $end
   $var wire 1 Q io_bundleCtrl_ctrlLoad $end
   $var wire 1 R io_bundleCtrl_ctrlStore $end
   $var wire 1 S io_bundleCtrl_ctrlALUSrc $end
   $var wire 1 T io_bundleCtrl_ctrlJAL $end
   $var wire 4 U io_bundleCtrl_ctrlOP [3:0] $end
   $var wire 1 V io_bundleCtrl_ctrlSigned $end
   $var wire 2 W io_bundleCtrl_ctrlLSType [1:0] $end
   $var wire 32 X io_resultALU [31:0] $end
   $var wire 32 Y io_rs1 [31:0] $end
   $var wire 32 Z io_rs2 [31:0] $end
   $var wire 32 [ io_imm [31:0] $end
   $var wire 1 \ io_resultBranch $end
   $var wire 32 ] io_result [31:0] $end
   $var wire 1 J pcReg_clock $end
   $var wire 1 K pcReg_reset $end
   $var wire 32 L pcReg_io_addrOut [31:0] $end
   $var wire 1 N pcReg_io_ctrlJump $end
   $var wire 1 O pcReg_io_ctrlBranch $end
   $var wire 1 \ pcReg_io_resultBranch $end
   $var wire 32 ] pcReg_io_addrTarget [31:0] $end
   $var wire 1 J memInst_clock $end
   $var wire 32 L memInst_io_addr [31:0] $end
   $var wire 32 M memInst_io_inst [31:0] $end
   $var wire 32 M decoder_io_inst [31:0] $end
   $var wire 1 N decoder_io_bundleCtrl_ctrlJump $end
   $var wire 1 O decoder_io_bundleCtrl_ctrlBranch $end
   $var wire 1 P decoder_io_bundleCtrl_ctrlRegWrite $end
   $var wire 1 Q decoder_io_bundleCtrl_ctrlLoad $end
   $var wire 1 R decoder_io_bundleCtrl_ctrlStore $end
   $var wire 1 S decoder_io_bundleCtrl_ctrlALUSrc $end
   $var wire 1 T decoder_io_bundleCtrl_ctrlJAL $end
   $var wire 4 U decoder_io_bundleCtrl_ctrlOP [3:0] $end
   $var wire 1 V decoder_io_bundleCtrl_ctrlSigned $end
   $var wire 2 W decoder_io_bundleCtrl_ctrlLSType [1:0] $end
   $var wire 5 ^ decoder_io_bundleReg_rs1 [4:0] $end
   $var wire 5 _ decoder_io_bundleReg_rs2 [4:0] $end
   $var wire 5 ` decoder_io_bundleReg_rd [4:0] $end
   $var wire 32 [ decoder_io_imm [31:0] $end
   $var wire 1 J registers_clock $end
   $var wire 1 P registers_io_ctrlRegWrite $end
   $var wire 1 N registers_io_ctrlJump $end
   $var wire 32 L registers_io_pc [31:0] $end
   $var wire 32 ] registers_io_dataWrite [31:0] $end
   $var wire 5 ^ registers_io_bundleReg_rs1 [4:0] $end
   $var wire 5 _ registers_io_bundleReg_rs2 [4:0] $end
   $var wire 5 ` registers_io_bundleReg_rd [4:0] $end
   $var wire 32 Y registers_io_dataRead1 [31:0] $end
   $var wire 32 Z registers_io_dataRead2 [31:0] $end
   $var wire 1 S alu_io_bundleAluControl_ctrlALUSrc $end
   $var wire 1 T alu_io_bundleAluControl_ctrlJAL $end
   $var wire 4 U alu_io_bundleAluControl_ctrlOP [3:0] $end
   $var wire 1 V alu_io_bundleAluControl_ctrlSigned $end
   $var wire 1 O alu_io_bundleAluControl_ctrlBranch $end
   $var wire 32 Y alu_io_dataRead1 [31:0] $end
   $var wire 32 Z alu_io_dataRead2 [31:0] $end
   $var wire 32 [ alu_io_imm [31:0] $end
   $var wire 32 L alu_io_pc [31:0] $end
   $var wire 1 \ alu_io_resultBranch $end
   $var wire 32 X alu_io_resultAlu [31:0] $end
   $var wire 1 J memData_clock $end
   $var wire 1 Q memData_io_bundleMemDataControl_ctrlLoad $end
   $var wire 1 R memData_io_bundleMemDataControl_ctrlStore $end
   $var wire 1 V memData_io_bundleMemDataControl_ctrlSigned $end
   $var wire 2 a memData_io_bundleMemDataControl_ctrlLSType [1:0] $end
   $var wire 32 X memData_io_resultALU [31:0] $end
   $var wire 32 Z memData_io_dataStore [31:0] $end
   $var wire 32 ] memData_io_result [31:0] $end
   $var wire 1 N controller_io_bundleControlIn_ctrlJump $end
   $var wire 1 O controller_io_bundleControlIn_ctrlBranch $end
   $var wire 1 P controller_io_bundleControlIn_ctrlRegWrite $end
   $var wire 1 Q controller_io_bundleControlIn_ctrlLoad $end
   $var wire 1 R controller_io_bundleControlIn_ctrlStore $end
   $var wire 1 S controller_io_bundleControlIn_ctrlALUSrc $end
   $var wire 1 T controller_io_bundleControlIn_ctrlJAL $end
   $var wire 4 U controller_io_bundleControlIn_ctrlOP [3:0] $end
   $var wire 1 V controller_io_bundleControlIn_ctrlSigned $end
   $var wire 1 S controller_io_bundleAluControl_ctrlALUSrc $end
   $var wire 1 T controller_io_bundleAluControl_ctrlJAL $end
   $var wire 4 U controller_io_bundleAluControl_ctrlOP [3:0] $end
   $var wire 1 V controller_io_bundleAluControl_ctrlSigned $end
   $var wire 1 O controller_io_bundleAluControl_ctrlBranch $end
   $var wire 1 Q controller_io_bundleMemDataControl_ctrlLoad $end
   $var wire 1 R controller_io_bundleMemDataControl_ctrlStore $end
   $var wire 1 V controller_io_bundleMemDataControl_ctrlSigned $end
   $var wire 2 a controller_io_bundleMemDataControl_ctrlLSType [1:0] $end
   $var wire 1 N controller_io_bundleControlOut_ctrlJump $end
   $var wire 1 O controller_io_bundleControlOut_ctrlBranch $end
   $var wire 1 P controller_io_bundleControlOut_ctrlRegWrite $end
   $scope module alu $end
    $var wire 1 S io_bundleAluControl_ctrlALUSrc $end
    $var wire 1 T io_bundleAluControl_ctrlJAL $end
    $var wire 4 U io_bundleAluControl_ctrlOP [3:0] $end
    $var wire 1 V io_bundleAluControl_ctrlSigned $end
    $var wire 1 O io_bundleAluControl_ctrlBranch $end
    $var wire 32 Y io_dataRead1 [31:0] $end
    $var wire 32 Z io_dataRead2 [31:0] $end
    $var wire 32 [ io_imm [31:0] $end
    $var wire 32 L io_pc [31:0] $end
    $var wire 1 \ io_resultBranch $end
    $var wire 32 X io_resultAlu [31:0] $end
    $var wire 32 # oprand1 [31:0] $end
    $var wire 32 $ oprand2 [31:0] $end
   $upscope $end
   $scope module controller $end
    $var wire 1 N io_bundleControlIn_ctrlJump $end
    $var wire 1 O io_bundleControlIn_ctrlBranch $end
    $var wire 1 P io_bundleControlIn_ctrlRegWrite $end
    $var wire 1 Q io_bundleControlIn_ctrlLoad $end
    $var wire 1 R io_bundleControlIn_ctrlStore $end
    $var wire 1 S io_bundleControlIn_ctrlALUSrc $end
    $var wire 1 T io_bundleControlIn_ctrlJAL $end
    $var wire 4 U io_bundleControlIn_ctrlOP [3:0] $end
    $var wire 1 V io_bundleControlIn_ctrlSigned $end
    $var wire 1 S io_bundleAluControl_ctrlALUSrc $end
    $var wire 1 T io_bundleAluControl_ctrlJAL $end
    $var wire 4 U io_bundleAluControl_ctrlOP [3:0] $end
    $var wire 1 V io_bundleAluControl_ctrlSigned $end
    $var wire 1 O io_bundleAluControl_ctrlBranch $end
    $var wire 1 Q io_bundleMemDataControl_ctrlLoad $end
    $var wire 1 R io_bundleMemDataControl_ctrlStore $end
    $var wire 1 V io_bundleMemDataControl_ctrlSigned $end
    $var wire 2 a io_bundleMemDataControl_ctrlLSType [1:0] $end
    $var wire 1 N io_bundleControlOut_ctrlJump $end
    $var wire 1 O io_bundleControlOut_ctrlBranch $end
    $var wire 1 P io_bundleControlOut_ctrlRegWrite $end
   $upscope $end
   $scope module decoder $end
    $var wire 32 M io_inst [31:0] $end
    $var wire 1 N io_bundleCtrl_ctrlJump $end
    $var wire 1 O io_bundleCtrl_ctrlBranch $end
    $var wire 1 P io_bundleCtrl_ctrlRegWrite $end
    $var wire 1 Q io_bundleCtrl_ctrlLoad $end
    $var wire 1 R io_bundleCtrl_ctrlStore $end
    $var wire 1 S io_bundleCtrl_ctrlALUSrc $end
    $var wire 1 T io_bundleCtrl_ctrlJAL $end
    $var wire 4 U io_bundleCtrl_ctrlOP [3:0] $end
    $var wire 1 V io_bundleCtrl_ctrlSigned $end
    $var wire 2 W io_bundleCtrl_ctrlLSType [1:0] $end
    $var wire 5 ^ io_bundleReg_rs1 [4:0] $end
    $var wire 5 _ io_bundleReg_rs2 [4:0] $end
    $var wire 5 ` io_bundleReg_rd [4:0] $end
    $var wire 32 [ io_imm [31:0] $end
    $var wire 32 % imm_i [31:0] $end
    $var wire 32 b imm_s [31:0] $end
    $var wire 32 c imm_b [31:0] $end
    $var wire 32 d imm_u [31:0] $end
    $var wire 33 e imm_j [32:0] $end
    $var wire 32 g imm_shamt [31:0] $end
   $upscope $end
   $scope module memData $end
    $var wire 1 J clock $end
    $var wire 1 Q io_bundleMemDataControl_ctrlLoad $end
    $var wire 1 R io_bundleMemDataControl_ctrlStore $end
    $var wire 1 V io_bundleMemDataControl_ctrlSigned $end
    $var wire 2 a io_bundleMemDataControl_ctrlLSType [1:0] $end
    $var wire 32 X io_resultALU [31:0] $end
    $var wire 32 Z io_dataStore [31:0] $end
    $var wire 32 ] io_result [31:0] $end
    $var wire 1 l mem_dataLoad_MPORT_en $end
    $var wire 10 & mem_dataLoad_MPORT_addr [9:0] $end
    $var wire 32 ' mem_dataLoad_MPORT_data [31:0] $end
    $var wire 32 Z mem_MPORT_data [31:0] $end
    $var wire 10 & mem_MPORT_addr [9:0] $end
    $var wire 1 l mem_MPORT_mask $end
    $var wire 1 m mem_MPORT_en $end
    $var wire 32 h mem_MPORT_1_data [31:0] $end
    $var wire 10 & mem_MPORT_1_addr [9:0] $end
    $var wire 1 l mem_MPORT_1_mask $end
    $var wire 1 i mem_MPORT_1_en $end
    $var wire 32 j mem_MPORT_2_data [31:0] $end
    $var wire 10 & mem_MPORT_2_addr [9:0] $end
    $var wire 1 l mem_MPORT_2_mask $end
    $var wire 1 k mem_MPORT_2_en $end
    $var wire 32 ' dataLoad [31:0] $end
   $upscope $end
   $scope module memInst $end
    $var wire 1 J clock $end
    $var wire 32 L io_addr [31:0] $end
    $var wire 32 M io_inst [31:0] $end
    $var wire 1 l mem_io_inst_MPORT_en $end
    $var wire 10 ( mem_io_inst_MPORT_addr [9:0] $end
    $var wire 32 M mem_io_inst_MPORT_data [31:0] $end
   $upscope $end
   $scope module pcReg $end
    $var wire 1 J clock $end
    $var wire 1 K reset $end
    $var wire 32 L io_addrOut [31:0] $end
    $var wire 1 N io_ctrlJump $end
    $var wire 1 O io_ctrlBranch $end
    $var wire 1 \ io_resultBranch $end
    $var wire 32 ] io_addrTarget [31:0] $end
    $var wire 32 ) regPC [31:0] $end
   $upscope $end
   $scope module registers $end
    $var wire 1 J clock $end
    $var wire 1 P io_ctrlRegWrite $end
    $var wire 1 N io_ctrlJump $end
    $var wire 32 L io_pc [31:0] $end
    $var wire 32 ] io_dataWrite [31:0] $end
    $var wire 5 ^ io_bundleReg_rs1 [4:0] $end
    $var wire 5 _ io_bundleReg_rs2 [4:0] $end
    $var wire 5 ` io_bundleReg_rd [4:0] $end
    $var wire 32 Y io_dataRead1 [31:0] $end
    $var wire 32 Z io_dataRead2 [31:0] $end
    $var wire 32 * regs_0 [31:0] $end
    $var wire 32 + regs_1 [31:0] $end
    $var wire 32 , regs_2 [31:0] $end
    $var wire 32 - regs_3 [31:0] $end
    $var wire 32 . regs_4 [31:0] $end
    $var wire 32 / regs_5 [31:0] $end
    $var wire 32 0 regs_6 [31:0] $end
    $var wire 32 1 regs_7 [31:0] $end
    $var wire 32 2 regs_8 [31:0] $end
    $var wire 32 3 regs_9 [31:0] $end
    $var wire 32 4 regs_10 [31:0] $end
    $var wire 32 5 regs_11 [31:0] $end
    $var wire 32 6 regs_12 [31:0] $end
    $var wire 32 7 regs_13 [31:0] $end
    $var wire 32 8 regs_14 [31:0] $end
    $var wire 32 9 regs_15 [31:0] $end
    $var wire 32 : regs_16 [31:0] $end
    $var wire 32 ; regs_17 [31:0] $end
    $var wire 32 < regs_18 [31:0] $end
    $var wire 32 = regs_19 [31:0] $end
    $var wire 32 > regs_20 [31:0] $end
    $var wire 32 ? regs_21 [31:0] $end
    $var wire 32 @ regs_22 [31:0] $end
    $var wire 32 A regs_23 [31:0] $end
    $var wire 32 B regs_24 [31:0] $end
    $var wire 32 C regs_25 [31:0] $end
    $var wire 32 D regs_26 [31:0] $end
    $var wire 32 E regs_27 [31:0] $end
    $var wire 32 F regs_28 [31:0] $end
    $var wire 32 G regs_29 [31:0] $end
    $var wire 32 H regs_30 [31:0] $end
    $var wire 32 I regs_31 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b0000000000 &
b00000000000000000000000000000000 '
b0000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
0J
1K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
0N
0O
1P
1Q
0R
1S
0T
b0001 U
1V
b00 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
0\
b00000000000000000000000000000000 ]
b00000 ^
b00000 _
b00000 `
b01 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b000000000000000000000000000000000 e
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
0i
b00000000000000000000000000000000 j
0k
1l
0m
#1
b0000100001 (
b00000000000000000000000010000100 )
1J
b00000000000000000000000010000100 L
#2
0J
0K
#3
b0000100010 (
b00000000000000000000000010001000 )
1J
b00000000000000000000000010001000 L

// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module Atomics(
  input         io_write,
  input  [2:0]  io_a_opcode,
                io_a_param,
  input  [3:0]  io_a_mask,
  input  [31:0] io_a_data,
                io_data_in,
  output [31:0] io_data_out
);

  wire [3:0][3:0] _GEN = '{4'hC, 4'h8, 4'hE, 4'h6};	// @[Atomics.scala:43:8]
  wire [3:0]      signBit = io_a_mask & {1'h1, ~(io_a_mask[3:1])};	// @[Atomics.scala:24:{27,38}, Cat.scala:33:92]
  wire [31:0]     _GEN_0 = ({{8{io_a_mask[3]}}, {8{io_a_mask[2]}}, {8{io_a_mask[1]}}, {8{io_a_mask[0]}}} & io_a_data) + ({32{~(io_a_param[2])}} ^ io_data_in);	// @[Atomics.scala:20:28, :25:18, :26:{44,57}, Bitwise.scala:28:17, :77:12, Cat.scala:33:92]
  wire [3:0]      _sign_a_T_33 = {io_a_data[31], io_a_data[23], io_a_data[15], io_a_data[7]} & signBit;	// @[Atomics.scala:24:27, :27:{36,83}, Cat.scala:33:92]
  wire [3:0]      _GEN_1 = _GEN[io_a_param[1:0]];	// @[Atomics.scala:41:15, :43:8]
  wire [3:0]      _logical_T_65 = _GEN_1 >> {2'h0, io_a_data[0], io_data_in[0]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_68 = _GEN_1 >> {2'h0, io_a_data[1], io_data_in[1]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_71 = _GEN_1 >> {2'h0, io_a_data[2], io_data_in[2]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_74 = _GEN_1 >> {2'h0, io_a_data[3], io_data_in[3]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_77 = _GEN_1 >> {2'h0, io_a_data[4], io_data_in[4]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_80 = _GEN_1 >> {2'h0, io_a_data[5], io_data_in[5]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_83 = _GEN_1 >> {2'h0, io_a_data[6], io_data_in[6]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_86 = _GEN_1 >> {2'h0, io_a_data[7], io_data_in[7]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_89 = _GEN_1 >> {2'h0, io_a_data[8], io_data_in[8]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_92 = _GEN_1 >> {2'h0, io_a_data[9], io_data_in[9]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_95 = _GEN_1 >> {2'h0, io_a_data[10], io_data_in[10]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_98 = _GEN_1 >> {2'h0, io_a_data[11], io_data_in[11]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_101 = _GEN_1 >> {2'h0, io_a_data[12], io_data_in[12]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_104 = _GEN_1 >> {2'h0, io_a_data[13], io_data_in[13]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_107 = _GEN_1 >> {2'h0, io_a_data[14], io_data_in[14]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_110 = _GEN_1 >> {2'h0, io_a_data[15], io_data_in[15]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_113 = _GEN_1 >> {2'h0, io_a_data[16], io_data_in[16]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_116 = _GEN_1 >> {2'h0, io_a_data[17], io_data_in[17]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_119 = _GEN_1 >> {2'h0, io_a_data[18], io_data_in[18]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_122 = _GEN_1 >> {2'h0, io_a_data[19], io_data_in[19]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_125 = _GEN_1 >> {2'h0, io_a_data[20], io_data_in[20]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_128 = _GEN_1 >> {2'h0, io_a_data[21], io_data_in[21]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_131 = _GEN_1 >> {2'h0, io_a_data[22], io_data_in[22]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_134 = _GEN_1 >> {2'h0, io_a_data[23], io_data_in[23]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_137 = _GEN_1 >> {2'h0, io_a_data[24], io_data_in[24]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_140 = _GEN_1 >> {2'h0, io_a_data[25], io_data_in[25]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_143 = _GEN_1 >> {2'h0, io_a_data[26], io_data_in[26]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_146 = _GEN_1 >> {2'h0, io_a_data[27], io_data_in[27]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_149 = _GEN_1 >> {2'h0, io_a_data[28], io_data_in[28]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_152 = _GEN_1 >> {2'h0, io_a_data[29], io_data_in[29]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_155 = _GEN_1 >> {2'h0, io_a_data[30], io_data_in[30]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [3:0]      _logical_T_158 = _GEN_1 >> {2'h0, io_a_data[31], io_data_in[31]};	// @[Atomics.scala:27:36, :43:8, :47:42]
  wire [7:0][1:0] _GEN_2 = {{2'h0}, {2'h0}, {2'h0}, {2'h0}, {2'h3}, {io_a_param[2] ? 2'h2 : {1'h0, io_a_param[0] == ((|_sign_a_T_33) == (|({io_data_in[31], io_data_in[23], io_data_in[15], io_data_in[7]} & signBit)) ? ({_GEN_0[31], _GEN_0[23], _GEN_0[15], _GEN_0[7]} & signBit) == 4'h0 : io_a_param[1] == (|_sign_a_T_33))}}, {2'h1}, {2'h1}};	// @[Atomics.scala:20:28, :21:28, :22:28, :24:27, :26:57, :27:{36,83,94}, :31:32, :32:{21,29}, :33:25, :47:{19,42}, :50:8, Cat.scala:33:92]
  wire [1:0]      select = io_write ? 2'h1 : _GEN_2[io_a_opcode];	// @[Atomics.scala:47:{19,42}]
  wire [3:0][7:0] _GEN_3 = {{{_logical_T_110[0], _logical_T_107[0], _logical_T_104[0], _logical_T_101[0], _logical_T_98[0], _logical_T_95[0], _logical_T_92[0], _logical_T_89[0]}}, {_GEN_0[15:8]}, {io_a_data[15:8]}, {io_data_in[15:8]}};	// @[Atomics.scala:26:57, :43:8, :61:59, Cat.scala:33:92]
  wire [3:0][7:0] _GEN_4 = {{{_logical_T_86[0], _logical_T_83[0], _logical_T_80[0], _logical_T_77[0], _logical_T_74[0], _logical_T_71[0], _logical_T_68[0], _logical_T_65[0]}}, {_GEN_0[7:0]}, {io_a_data[7:0]}, {io_data_in[7:0]}};	// @[Atomics.scala:26:57, :43:8, :61:59, Cat.scala:33:92]
  wire [3:0][7:0] _GEN_5 = {{{_logical_T_158[0], _logical_T_155[0], _logical_T_152[0], _logical_T_149[0], _logical_T_146[0], _logical_T_143[0], _logical_T_140[0], _logical_T_137[0]}}, {_GEN_0[31:24]}, {io_a_data[31:24]}, {io_data_in[31:24]}};	// @[Atomics.scala:26:57, :43:8, :61:59, Cat.scala:33:92]
  wire [3:0][7:0] _GEN_6 = {{{_logical_T_134[0], _logical_T_131[0], _logical_T_128[0], _logical_T_125[0], _logical_T_122[0], _logical_T_119[0], _logical_T_116[0], _logical_T_113[0]}}, {_GEN_0[23:16]}, {io_a_data[23:16]}, {io_data_in[23:16]}};	// @[Atomics.scala:26:57, :43:8, :61:59, Cat.scala:33:92]
  assign io_data_out = {_GEN_5[io_a_mask[3] ? select : 2'h0], _GEN_6[io_a_mask[2] ? select : 2'h0], _GEN_3[io_a_mask[1] ? select : 2'h0], _GEN_4[io_a_mask[0] ? select : 2'h0]};	// @[Atomics.scala:47:{19,42}, :59:47, Bitwise.scala:28:17, Cat.scala:33:92]
endmodule


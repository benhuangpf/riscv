// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module DatPath(
  input         clock,
                reset,
                io_imem_resp_valid,
  input  [31:0] io_imem_resp_bits_data,
                io_dmem_resp_bits_data,
  input         io_ctl_stall,
                io_ctl_dmiss,
  input  [2:0]  io_ctl_pc_sel,
  input  [1:0]  io_ctl_op1_sel,
                io_ctl_op2_sel,
  input  [3:0]  io_ctl_alu_fun,
  input  [1:0]  io_ctl_wb_sel,
  input         io_ctl_rf_wen,
  input  [2:0]  io_ctl_csr_cmd,
  input         io_ctl_exception,
  input  [31:0] io_ctl_exception_cause,
  input  [2:0]  io_ctl_pc_sel_no_xept,
  input         io_interrupt_debug,
                io_interrupt_mtip,
                io_interrupt_msip,
                io_interrupt_meip,
                io_hartid,
  output        io_imem_req_valid,
  output [31:0] io_imem_req_bits_addr,
                io_dmem_req_bits_addr,
                io_dmem_req_bits_data,
                io_dat_inst,
  output        io_dat_imiss,
                io_dat_br_eq,
                io_dat_br_lt,
                io_dat_br_ltu,
                io_dat_csr_eret,
                io_dat_csr_interrupt,
                io_dat_inst_misaligned,
  output [2:0]  io_dat_mem_address_low
);

  wire              interrupt_edge;	// @[dpath.scala:218:39]
  wire              _csr_io_retire_T;	// @[dpath.scala:201:39]
  wire [31:0]       jump_reg_target;	// @[dpath.scala:191:61]
  wire [31:0]       _jump_reg_target_T_1;	// @[dpath.scala:191:40]
  wire [31:0]       jmp_target;	// @[dpath.scala:190:30]
  wire [31:0]       br_target;	// @[dpath.scala:189:30]
  reg               reg_dmiss;	// @[dpath.scala:86:27]
  wire [31:0]       _csr_io_rw_rdata;	// @[dpath.scala:194:20]
  wire [31:0]       _csr_io_evec;	// @[dpath.scala:194:20]
  wire [31:0]       _csr_io_time;	// @[dpath.scala:194:20]
  wire              _csr_io_interrupt;	// @[dpath.scala:194:20]
  wire [31:0]       _csr_io_interrupt_cause;	// @[dpath.scala:194:20]
  wire [31:0]       _regfile_ext_R0_data;	// @[dpath.scala:120:21]
  wire [31:0]       _regfile_ext_R1_data;	// @[dpath.scala:120:21]
  wire [31:0]       _regfile_ext_R2_data;	// @[dpath.scala:120:21]
  reg  [31:0]       pc_reg;	// @[dpath.scala:74:24]
  wire [31:0]       pc_plus4 = pc_reg + 32'h4;	// @[dpath.scala:74:24, :81:24, :210:43]
  reg  [31:0]       if_inst_buffer;	// @[dpath.scala:87:32]
  wire [31:0]       inst = reg_dmiss ? if_inst_buffer : io_imem_resp_bits_data;	// @[dpath.scala:86:27, :87:32, :97:18]
  wire              _tval_inst_ma_T = io_ctl_pc_sel_no_xept == 3'h1;	// @[dpath.scala:68:34, :102:83]
  wire              _tval_inst_ma_T_1 = io_ctl_pc_sel_no_xept == 3'h2;	// @[dpath.scala:69:34, :103:83]
  wire              _tval_inst_ma_T_2 = io_ctl_pc_sel_no_xept == 3'h3;	// @[dpath.scala:70:34, :104:83]
  wire              wb_wen = io_ctl_rf_wen & ~io_ctl_exception & ~interrupt_edge;	// @[dpath.scala:117:{34,52,55}, :218:39]
  wire [31:0]       rs1_data = (|(inst[19:15])) ? _regfile_ext_R1_data : 32'h0;	// @[dpath.scala:97:18, :112:23, :120:21, :134:{22,33}]
  wire [31:0]       rs2_data = (|(inst[24:20])) ? _regfile_ext_R2_data : 32'h0;	// @[dpath.scala:97:18, :113:23, :120:21, :135:{22,33}]
  wire [19:0]       _imm_i_sext_T_2 = {20{inst[31]}};	// @[Bitwise.scala:77:12, dpath.scala:97:18, :139:20, :147:38]
  wire [3:0][31:0]  _GEN = {{32'h0}, {{27'h0, inst[19:15]}}, {{inst[31:12], 12'h0}}, {rs1_data}};	// @[Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:101:16, dpath.scala:97:18, :112:23, :134:22, :142:20, :155:32, :156:32, :157:32]
  wire [31:0]       alu_op1 = _GEN[io_ctl_op1_sel];	// @[Mux.scala:101:16, dpath.scala:155:32, :156:32, :157:32]
  wire [3:0][31:0]  _GEN_0 = {{pc_reg}, {{{20{inst[31]}}, inst[31:25], inst[11:7]}}, {{_imm_i_sext_T_2, inst[31:20]}}, {rs2_data}};	// @[Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:101:16, dpath.scala:74:24, :97:18, :114:23, :135:22, :139:20, :140:24, :148:38, :161:32, :162:32, :163:32, :164:32]
  wire [31:0]       alu_op2 = _GEN_0[io_ctl_op2_sel];	// @[Mux.scala:101:16, dpath.scala:161:32, :162:32, :163:32, :164:32]
  wire [62:0]       _alu_out_T_19 = {31'h0, alu_op1} << alu_op2[4:0];	// @[Mux.scala:101:16, dpath.scala:172:27, :182:62]
  wire [31:0]       _GEN_1 = {27'h0, alu_op2[4:0]};	// @[Bitwise.scala:77:12, Mux.scala:101:16, dpath.scala:172:27, :183:68]
  wire [15:0][31:0] _GEN_2 = {{32'h0}, {32'h0}, {32'h0}, {32'h0}, {alu_op1}, {{31'h0, alu_op1 < alu_op2}}, {{31'h0, $signed(alu_op1) < $signed(alu_op2)}}, {alu_op1 ^ alu_op2}, {alu_op1 | alu_op2}, {alu_op1 & alu_op2}, {$signed($signed(alu_op1) >>> _GEN_1)}, {alu_op1 >> _GEN_1}, {_alu_out_T_19[31:0]}, {alu_op1 - alu_op2}, {alu_op1 + alu_op2}, {32'h0}};	// @[Mux.scala:101:16, dpath.scala:175:{35,61}, :176:{35,61}, :177:{35,61}, :178:{35,61}, :179:{35,61}, :180:{35,68}, :181:{35,61}, :182:{35,62,75}, :183:{35,68}, :184:{35,61}, :185:35]
  wire [31:0]       alu_out = _GEN_2[io_ctl_alu_fun];	// @[Mux.scala:101:16, dpath.scala:175:35, :176:35, :177:35, :178:35, :179:35, :180:35, :181:35, :182:35, :183:35, :184:35, :185:35]
  assign br_target = pc_reg + {{20{inst[31]}}, inst[7], inst[30:25], inst[11:8], 1'h0};	// @[Cat.scala:33:92, dpath.scala:74:24, :97:18, :141:{24,34,43,56}, :189:30]
  assign jmp_target = pc_reg + {{12{inst[31]}}, inst[19:12], inst[20], inst[30:21], 1'h0};	// @[Cat.scala:33:92, dpath.scala:74:24, :97:18, :141:24, :143:{34,47,57}, :190:30]
  assign _jump_reg_target_T_1 = rs1_data + {_imm_i_sext_T_2, inst[31:20]};	// @[Bitwise.scala:77:12, dpath.scala:97:18, :134:22, :139:20, :191:40]
  assign jump_reg_target = _jump_reg_target_T_1 & 32'hFFFFFFFE;	// @[dpath.scala:191:{40,61,63}]
  assign _csr_io_retire_T = io_ctl_stall | io_ctl_exception;	// @[dpath.scala:201:39]
  reg               reg_interrupt_edge;	// @[dpath.scala:214:36]
  assign interrupt_edge = _csr_io_interrupt & ~reg_interrupt_edge;	// @[dpath.scala:194:20, :214:36, :218:{39,42}]
  wire [3:0][31:0]  _GEN_3 = {{_csr_io_rw_rdata}, {pc_plus4}, {io_dmem_resp_bits_data}, {alu_out}};	// @[Mux.scala:101:16, dpath.scala:81:24, :194:20, :233:34, :234:34, :235:34, :236:34]
  wire [31:0]       wb_data = _GEN_3[io_ctl_wb_sel];	// @[Mux.scala:101:16, dpath.scala:233:34, :234:34, :235:34, :236:34]
  wire [7:0][31:0]  _GEN_4 = {{pc_plus4}, {pc_plus4}, {pc_plus4}, {_csr_io_evec}, {jump_reg_target}, {jmp_target}, {br_target}, {pc_plus4}};	// @[Mux.scala:101:16, dpath.scala:67:34, :68:34, :69:34, :70:34, :71:34, :81:24, :189:30, :190:30, :191:61, :194:20]
  always @(posedge clock) begin
    if (reset) begin
      // pc_reg <= 32'h10040;	// @[dpath.scala:74:24]
      pc_reg <= 32'h80000000;	// @[dpath.scala:74:24]
      reg_dmiss <= 1'h0;	// @[dpath.scala:86:27]
      if_inst_buffer <= 32'h0;	// @[dpath.scala:87:32]
      reg_interrupt_edge <= 1'h0;	// @[dpath.scala:214:36]
    end
    else begin
      if (io_ctl_stall) begin
      end
      else begin
        pc_reg <= _GEN_4[io_ctl_pc_sel];	// @[Mux.scala:101:16, dpath.scala:67:34, :68:34, :69:34, :70:34, :71:34, :74:24]
        reg_interrupt_edge <= _csr_io_interrupt;	// @[dpath.scala:194:20, :214:36]
      end
      reg_dmiss <= io_ctl_dmiss;	// @[dpath.scala:86:27]
      if (io_imem_resp_valid)
        if_inst_buffer <= io_imem_resp_bits_data;	// @[dpath.scala:87:32]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire  [7:0][7:0] _GEN_5 = {{8'h3F}, {8'h3F}, {8'h3F}, {8'h45}, {8'h52}, {8'h4A}, {8'h42}, {8'h20}};	// @[Mux.scala:81:58, dpath.scala:67:34, :68:34, :69:34, :70:34, :71:34]
    always @(posedge clock) begin	// @[dpath.scala:89:13]
      if (io_imem_resp_valid & ~reset & reg_dmiss) begin	// @[dpath.scala:86:27, :89:13]
        if (`ASSERT_VERBOSE_COND_)	// @[dpath.scala:89:13]
          $error("Assertion failed: instruction arrived during data miss\n    at dpath.scala:89 assert(!reg_dmiss, \"instruction arrived during data miss\")\n");	// @[dpath.scala:89:13]
        if (`STOP_COND_)	// @[dpath.scala:89:13]
          $fatal;	// @[dpath.scala:89:13]
      end
      if ((`PRINTF_COND_) & ~reset)	// @[dpath.scala:266:10]
        $fwrite(32'h80000002, "Cyc= %d [%d] pc=[%x] W[r%d=%x][%d] Op1=[r%d][%x] Op2=[r%d][%x] inst=[%x] %c%c%c DASM(%x)\n", _csr_io_time, ~_csr_io_retire_T, pc_reg, inst[11:7], wb_data, wb_wen, inst[19:15], alu_op1, inst[24:20], alu_op2, inst, io_ctl_stall ? 8'h53 : 8'h20, _GEN_5[io_ctl_pc_sel], io_ctl_exception ? 8'h58 : 8'h20, inst);	// @[Mux.scala:81:58, :101:16, dpath.scala:67:34, :68:34, :69:34, :70:34, :71:34, :74:24, :97:18, :112:23, :113:23, :114:23, :117:52, :194:20, :201:{24,39}, :266:10, :278:10, :285:10]
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0]     _RANDOM_0;
    logic [31:0]     _RANDOM_1;
    logic [31:0]     _RANDOM_2;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        pc_reg = _RANDOM_0;	// @[dpath.scala:74:24]
        reg_dmiss = _RANDOM_1[0];	// @[dpath.scala:86:27]
        if_inst_buffer = {_RANDOM_1[31:1], _RANDOM_2[0]};	// @[dpath.scala:86:27, :87:32]
        reg_interrupt_edge = _RANDOM_2[1];	// @[dpath.scala:87:32, :214:36]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  regfile_combMem regfile_ext (	// @[dpath.scala:120:21]
    .R0_addr (5'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R1_addr (inst[19:15]),	// @[dpath.scala:97:18, :112:23]
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R2_addr (inst[24:20]),	// @[dpath.scala:97:18, :113:23]
    .R2_en   (1'h1),
    .R2_clk  (clock),
    .W0_addr (inst[11:7]),	// @[dpath.scala:97:18, :114:23]
    .W0_en   (wb_wen & (|(inst[11:7]))),	// @[dpath.scala:97:18, :114:23, :117:52, :122:{17,29}]
    .W0_clk  (clock),
    .W0_data (wb_data),	// @[Mux.scala:101:16]
    .R0_data (_regfile_ext_R0_data),
    .R1_data (_regfile_ext_R1_data),
    .R2_data (_regfile_ext_R2_data)
  );
  CSRFile csr (	// @[dpath.scala:194:20]
    .clock               (clock),
    .reset               (reset),
    .io_ungated_clock    (clock),
    .io_interrupts_debug (io_interrupt_debug),
    .io_interrupts_mtip  (io_interrupt_mtip),
    .io_interrupts_msip  (io_interrupt_msip),
    .io_interrupts_meip  (io_interrupt_meip),
    .io_hartid           (io_hartid),
    .io_rw_addr          (inst[31:20]),	// @[dpath.scala:97:18, :139:20]
    .io_rw_cmd           (io_ctl_csr_cmd),
    .io_rw_wdata         (alu_out),	// @[Mux.scala:101:16]
    .io_exception        (io_ctl_exception),
    .io_retire           (~_csr_io_retire_T),	// @[dpath.scala:201:{24,39}]
    .io_cause            (io_ctl_exception ? io_ctl_exception_cause : _csr_io_interrupt_cause),	// @[dpath.scala:194:20, :225:23]
    .io_pc               (pc_reg),	// @[dpath.scala:74:24]
    .io_tval             (io_ctl_exception_cause == 32'h2 ? inst : io_ctl_exception_cause == 32'h0 ? (_tval_inst_ma_T ? br_target : _tval_inst_ma_T_1 ? jmp_target : _tval_inst_ma_T_2 ? jump_reg_target : 32'h0) : io_ctl_exception_cause == 32'h6 | io_ctl_exception_cause == 32'h4 ? alu_out : 32'h0),	// @[Mux.scala:101:16, dpath.scala:97:18, :102:83, :103:83, :104:83, :189:30, :190:30, :191:61, :207:43, :208:43, :209:43, :210:43]
    .io_rw_rdata         (_csr_io_rw_rdata),
    .io_eret             (io_dat_csr_eret),
    .io_evec             (_csr_io_evec),
    .io_time             (_csr_io_time),
    .io_interrupt        (_csr_io_interrupt),
    .io_interrupt_cause  (_csr_io_interrupt_cause)
  );
  assign io_imem_req_valid = ~reg_dmiss;	// @[dpath.scala:86:27, :96:25]
  assign io_imem_req_bits_addr = pc_reg;	// @[dpath.scala:74:24]
  assign io_dmem_req_bits_addr = alu_out;	// @[Mux.scala:101:16]
  assign io_dmem_req_bits_data = rs2_data;	// @[dpath.scala:135:22]
  assign io_dat_inst = inst;	// @[dpath.scala:97:18]
  assign io_dat_imiss = ~reg_dmiss & ~io_imem_resp_valid;	// @[dpath.scala:85:{39,42}, :86:27, :96:25]
  assign io_dat_br_eq = rs1_data == rs2_data;	// @[dpath.scala:134:22, :135:22, :242:31]
  assign io_dat_br_lt = $signed(rs1_data) < $signed(rs2_data);	// @[dpath.scala:134:22, :135:22, :243:38]
  assign io_dat_br_ltu = rs1_data < rs2_data;	// @[dpath.scala:134:22, :135:22, :244:38]
  assign io_dat_csr_interrupt = interrupt_edge;	// @[dpath.scala:218:39]
  assign io_dat_inst_misaligned = (|(br_target[1:0])) & _tval_inst_ma_T | (|(jmp_target[1:0])) & _tval_inst_ma_T_1 | _jump_reg_target_T_1[1] & _tval_inst_ma_T_2;	// @[dpath.scala:102:{41,48,58,83}, :103:{42,49,58,83,94}, :104:{47,58,83}, :189:30, :190:30, :191:40]
  assign io_dat_mem_address_low = alu_out[2:0];	// @[Mux.scala:101:16, dpath.scala:251:37]
endmodule


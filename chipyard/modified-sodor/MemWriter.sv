// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module MemWriter(
  input  [20:0] io_addr,
  input  [31:0] io_data,
  input  [1:0]  io_size,
  input         io_en,
  output [18:0] io_mem_addr,
  output [7:0]  io_mem_data_0,
                io_mem_data_1,
                io_mem_data_2,
                io_mem_data_3,
  output        io_mem_masks_0,
                io_mem_masks_1,
                io_mem_masks_2,
                io_mem_masks_3
);

  wire [3:0][1:0] _GEN = {2'h3, 2'h3, 2'h1, 2'h0};	// @[Mux.scala:81:{58,61}]
  wire [62:0]     _shiftedVec_T_1 = {31'h0, io_data} << {58'h0, io_addr[1:0], 3'h0};	// @[memory.scala:146:30, :147:{45,56}]
  wire [10:0]     _masks_mask_T = 11'h1F << _GEN[io_size];	// @[Mux.scala:81:{58,61}, memory.scala:79:38]
  wire [6:0]      _masks_maskWithOffset_T = {3'h0, _masks_mask_T[7:4]} << io_addr[1:0];	// @[memory.scala:79:{38,53}, :80:34, :146:30, :147:56]
  assign io_mem_addr = io_addr[20:2];	// @[memory.scala:151:32]
  assign io_mem_data_0 = _shiftedVec_T_1[31:24];	// @[Cat.scala:33:92, memory.scala:147:45]
  assign io_mem_data_1 = _shiftedVec_T_1[23:16];	// @[Cat.scala:33:92, memory.scala:147:45]
  assign io_mem_data_2 = _shiftedVec_T_1[15:8];	// @[Cat.scala:33:92, memory.scala:147:45]
  assign io_mem_data_3 = _shiftedVec_T_1[7:0];	// @[Cat.scala:33:92, memory.scala:147:45]
  assign io_mem_masks_0 = _masks_maskWithOffset_T[3] & io_en;	// @[memory.scala:80:{34,55}, :81:22, :153:58]
  assign io_mem_masks_1 = _masks_maskWithOffset_T[2] & io_en;	// @[memory.scala:80:{34,55}, :81:22, :153:58]
  assign io_mem_masks_2 = _masks_maskWithOffset_T[1] & io_en;	// @[memory.scala:80:{34,55}, :81:22, :153:58]
  assign io_mem_masks_3 = _masks_maskWithOffset_T[0] & io_en;	// @[memory.scala:80:{34,55}, :81:22, :153:58]
endmodule


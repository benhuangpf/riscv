// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module CSRFile(
  input         clock,
                reset,
                io_ungated_clock,
                io_interrupts_debug,
                io_interrupts_mtip,
                io_interrupts_msip,
                io_interrupts_meip,
                io_hartid,
  input  [11:0] io_rw_addr,
  input  [2:0]  io_rw_cmd,
  input  [31:0] io_rw_wdata,
  input         io_exception,
                io_retire,
  input  [31:0] io_cause,
                io_pc,
                io_tval,
  output [31:0] io_rw_rdata,
  output        io_eret,
  output [31:0] io_evec,
                io_time,
  output        io_interrupt,
  output [31:0] io_interrupt_cause
);

  wire [31:0] _io_rw_rdata_output;	// @[Mux.scala:27:73]
  reg         io_status_cease_r;	// @[Reg.scala:35:20]
  wire        _io_singleStep_T_1;	// @[CSR.scala:941:34]
  reg         reg_mstatus_mpie;	// @[CSR.scala:373:28]
  reg         reg_mstatus_mie;	// @[CSR.scala:373:28]
  reg         reg_dcsr_ebreakm;	// @[CSR.scala:381:25]
  reg  [2:0]  reg_dcsr_cause;	// @[CSR.scala:381:25]
  reg         reg_dcsr_step;	// @[CSR.scala:381:25]
  reg         reg_debug;	// @[CSR.scala:453:26]
  reg  [31:0] reg_dpc;	// @[CSR.scala:454:20]
  reg  [31:0] reg_dscratch0;	// @[CSR.scala:455:26]
  reg         reg_singleStepped;	// @[CSR.scala:457:30]
  reg  [31:0] reg_mie;	// @[CSR.scala:466:20]
  reg  [31:0] reg_mepc;	// @[CSR.scala:476:21]
  reg  [31:0] reg_mcause;	// @[CSR.scala:477:27]
  reg  [31:0] reg_mtval;	// @[CSR.scala:478:22]
  reg  [31:0] reg_mscratch;	// @[CSR.scala:480:25]
  reg  [31:0] reg_mtvec;	// @[CSR.scala:483:31]
  reg         reg_wfi;	// @[CSR.scala:542:54]
  reg  [2:0]  reg_mcountinhibit;	// @[CSR.scala:551:34]
  reg  [5:0]  small_0;	// @[Counters.scala:45:41]
  reg  [57:0] large_0;	// @[Counters.scala:50:31]
  reg  [5:0]  small_1;	// @[Counters.scala:45:41]
  reg  [57:0] large_1;	// @[Counters.scala:50:31]
  wire [8:0]  _GEN = {io_interrupts_meip, 3'h0, io_interrupts_mtip, 3'h0, io_interrupts_msip} & reg_mie[11:3];	// @[CSR.scala:378:44, :466:20, :575:56]
  wire [8:0]  _GEN_0 = reg_mstatus_mie ? _GEN : 9'h0;	// @[CSR.scala:373:28, :575:56, :581:25, Mux.scala:27:73]
  wire [31:0] read_mtvec = reg_mtvec & {25'h1FFFFFF, ~(reg_mtvec[0] ? 7'h7E : 7'h2)};	// @[CSR.scala:369:47, :483:31, :1584:{39,41}, package.scala:166:{35,37,41}]
  wire [11:0] decoded_decoded_invInputs = ~io_rw_addr;	// @[pla.scala:78:21]
  wire [11:0] _decoded_decoded_T = {decoded_decoded_invInputs[0], decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_4 = {decoded_decoded_invInputs[0], decoded_decoded_invInputs[1], io_rw_addr[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_6 = {io_rw_addr[0], decoded_decoded_invInputs[1], io_rw_addr[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [10:0] _decoded_decoded_T_8 = {decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], io_rw_addr[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_68 = {decoded_decoded_invInputs[0], decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], io_rw_addr[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_70 = {io_rw_addr[0], decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], io_rw_addr[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_72 = {decoded_decoded_invInputs[0], io_rw_addr[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], io_rw_addr[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_74 = {io_rw_addr[0], io_rw_addr[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], io_rw_addr[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_86 = {decoded_decoded_invInputs[0], decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], io_rw_addr[4], io_rw_addr[5], decoded_decoded_invInputs[6], io_rw_addr[7], io_rw_addr[8], io_rw_addr[9], io_rw_addr[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_88 = {io_rw_addr[0], decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], io_rw_addr[4], io_rw_addr[5], decoded_decoded_invInputs[6], io_rw_addr[7], io_rw_addr[8], io_rw_addr[9], io_rw_addr[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [10:0] _decoded_decoded_T_90 = {io_rw_addr[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], io_rw_addr[4], io_rw_addr[5], decoded_decoded_invInputs[6], io_rw_addr[7], io_rw_addr[8], io_rw_addr[9], io_rw_addr[10], decoded_decoded_invInputs[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [10:0] _decoded_decoded_T_92 = {decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], io_rw_addr[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_94 = {decoded_decoded_invInputs[0], io_rw_addr[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], io_rw_addr[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [10:0] _decoded_decoded_T_154 = {decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], io_rw_addr[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], io_rw_addr[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [11:0] _decoded_decoded_T_156 = {decoded_decoded_invInputs[0], io_rw_addr[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], io_rw_addr[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], io_rw_addr[11]};	// @[Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29]
  wire [31:0] _new_dcsr_WIRE = ((io_rw_cmd[1] ? _io_rw_rdata_output : 32'h0) | io_rw_wdata) & ~((&(io_rw_cmd[1:0])) ? io_rw_wdata : 32'h0);	// @[CSR.scala:1561:{9,13,30,39,41,45,49,55}, Mux.scala:27:73]
  wire        system_insn = io_rw_cmd == 3'h4;	// @[CSR.scala:818:31, Mux.scala:47:70]
  wire [11:0] _GEN_1 = ~io_rw_addr;	// @[pla.scala:78:21]
  wire        insn_call = system_insn & (&{_GEN_1[0], _GEN_1[1], _GEN_1[2], _GEN_1[3], _GEN_1[4], _GEN_1[5], _GEN_1[6], _GEN_1[7], _GEN_1[8], _GEN_1[9], _GEN_1[10], _GEN_1[11]});	// @[CSR.scala:818:31, :835:83, Cat.scala:33:92, pla.scala:78:21, :91:29, :98:74]
  wire        insn_break = system_insn & (&{io_rw_addr[0], _GEN_1[1], _GEN_1[2], _GEN_1[3], _GEN_1[4], _GEN_1[5], _GEN_1[6], _GEN_1[7], _GEN_1[8], _GEN_1[9], _GEN_1[10], _GEN_1[11]});	// @[CSR.scala:818:31, :835:83, Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74]
  wire        insn_ret = system_insn & (|{&{_GEN_1[2], _GEN_1[3], _GEN_1[4], _GEN_1[5], _GEN_1[6], _GEN_1[7], io_rw_addr[8], io_rw_addr[9], _GEN_1[10], _GEN_1[11]}, &{io_rw_addr[10], _GEN_1[11]}});	// @[CSR.scala:818:31, :835:83, Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39]
  wire [31:0] cause = insn_call ? 32'hB : insn_break ? 32'h3 : io_cause;	// @[CSR.scala:835:83, :900:8, :901:14, :1583:31]
  wire        _causeIsDebugTrigger_T_2 = cause[7:0] == 8'hE;	// @[CSR.scala:900:8, :902:25, :903:53]
  wire        causeIsDebugInt = cause[31] & _causeIsDebugTrigger_T_2;	// @[CSR.scala:900:8, :903:{30,39,53}]
  wire        causeIsDebugTrigger = ~(cause[31]) & _causeIsDebugTrigger_T_2;	// @[CSR.scala:900:8, :903:{30,53}, :904:{29,44}]
  wire        trapToDebug = reg_singleStepped | causeIsDebugInt | causeIsDebugTrigger | ~(cause[31]) & insn_break & reg_dcsr_ebreakm | reg_debug;	// @[CSR.scala:381:25, :453:26, :457:30, :835:83, :900:8, :903:{30,39}, :904:44, :905:{27,56}, :906:119]
  wire        _exception_T = insn_call | insn_break;	// @[CSR.scala:835:83, :940:24]
  assign _io_singleStep_T_1 = reg_dcsr_step & ~reg_debug;	// @[CSR.scala:381:25, :453:26, :868:45, :941:34]
  wire        exception = _exception_T | io_exception;	// @[CSR.scala:940:24, :960:43]
  wire        _T_442 = io_rw_addr[10] & io_rw_addr[7];	// @[CSR.scala:1072:{43,48,61}]
  wire [31:0] _GEN_2 = {large_1[25:0], small_1};	// @[CSR.scala:1098:11, Counters.scala:45:41, :50:31]
  wire [30:0] _io_rw_rdata_T_4 = (&{io_rw_addr[0], decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]}) ? 31'h40000100 : 31'h0;	// @[CSR.scala:610:25, Cat.scala:33:92, Mux.scala:27:73, pla.scala:78:21, :90:45, :91:29, :98:74]
  wire [2:0]  _io_rw_rdata_T_17 = (&_decoded_decoded_T_8) ? reg_mcountinhibit : 3'h0;	// @[CSR.scala:378:44, :551:34, Cat.scala:33:92, Mux.scala:27:73, pla.scala:98:74]
  wire [31:0] _GEN_3 = {large_0[25:0], small_0};	// @[Cat.scala:33:92, Counters.scala:45:41, :50:31]
  wire [15:0] _GEN_4 = _io_rw_rdata_T_4[15:0] | ((&{io_rw_addr[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], io_rw_addr[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], decoded_decoded_invInputs[10], decoded_decoded_invInputs[11]}) ? {4'h0, io_interrupts_meip, 3'h0, io_interrupts_mtip, 3'h0, io_interrupts_msip, 3'h0} : 16'h0);	// @[CSR.scala:378:44, :571:22, :632:27, Cat.scala:33:92, Mux.scala:27:73, pla.scala:78:21, :90:45, :91:29, :98:74]
  assign _io_rw_rdata_output =
    ((&_decoded_decoded_T_92) ? _GEN_2 : 32'h0) | ((&_decoded_decoded_T_94) ? _GEN_3 : 32'h0) | ((&{decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], decoded_decoded_invInputs[8], decoded_decoded_invInputs[9], io_rw_addr[10], io_rw_addr[11]}) ? _GEN_2 : 32'h0) | ((&{decoded_decoded_invInputs[0], io_rw_addr[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], decoded_decoded_invInputs[8], decoded_decoded_invInputs[9], io_rw_addr[10], io_rw_addr[11]}) ? _GEN_3 : 32'h0) | ((&_decoded_decoded_T) ? {24'h18, reg_mstatus_mpie, 3'h0, reg_mstatus_mie, 3'h0} : 32'h0) | ((&_decoded_decoded_T_6) ? read_mtvec : 32'h0) | ((&_decoded_decoded_T_4) ? reg_mie : 32'h0) | ((&_decoded_decoded_T_68) ? reg_mscratch : 32'h0) | ((&_decoded_decoded_T_70) ? ~(~reg_mepc | 32'h3) : 32'h0) | ((&_decoded_decoded_T_74) ? reg_mtval : 32'h0) | ((&_decoded_decoded_T_72) ? reg_mcause : 32'h0) | ((&_decoded_decoded_T_86) ? {16'h4000, reg_dcsr_ebreakm, 6'h0, reg_dcsr_cause, 3'h0, reg_dcsr_step, 2'h3} : 32'h0) | ((&_decoded_decoded_T_88) ? ~(~reg_dpc | 32'h3) : 32'h0) | ((&_decoded_decoded_T_90) ? reg_dscratch0 : 32'h0) | {1'h0, _io_rw_rdata_T_4[30:16], _GEN_4[15:3], _GEN_4[2:1] | _io_rw_rdata_T_17[2:1], _GEN_4[0] | (&{io_rw_addr[2], decoded_decoded_invInputs[3], io_rw_addr[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], decoded_decoded_invInputs[7], io_rw_addr[8], io_rw_addr[9], io_rw_addr[10], io_rw_addr[11]}) & io_hartid | _io_rw_rdata_T_17[0]} | ((&_decoded_decoded_T_154) ? large_1[57:26] : 32'h0) | ((&_decoded_decoded_T_156) ? large_0[57:26] : 32'h0)
    | ((&{decoded_decoded_invInputs[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], io_rw_addr[7], decoded_decoded_invInputs[8], decoded_decoded_invInputs[9], io_rw_addr[10], io_rw_addr[11]}) ? large_1[57:26] : 32'h0) | ((&{decoded_decoded_invInputs[0], io_rw_addr[1], decoded_decoded_invInputs[2], decoded_decoded_invInputs[3], decoded_decoded_invInputs[4], decoded_decoded_invInputs[5], decoded_decoded_invInputs[6], io_rw_addr[7], decoded_decoded_invInputs[8], decoded_decoded_invInputs[9], io_rw_addr[10], io_rw_addr[11]}) ? large_0[57:26] : 32'h0);	// @[CSR.scala:373:28, :378:44, :381:25, :454:20, :455:26, :466:20, :476:21, :477:27, :478:22, :480:25, :632:27, :696:50, :697:54, :1098:11, :1583:{26,28,31}, Cat.scala:33:92, Counters.scala:50:31, Mux.scala:27:73, package.scala:155:13, :166:35, pla.scala:78:21, :90:45, :91:29, :98:74]
  wire        csr_wen = io_rw_cmd == 3'h6 | (&io_rw_cmd) | io_rw_cmd == 3'h5;	// @[Mux.scala:47:70, package.scala:16:47, :73:59]
  wire [6:0]  nextSmall = {1'h0, small_0} + {6'h0, io_retire};	// @[Counters.scala:45:41, :46:33]
  wire        _large_T_2 = nextSmall[6] & ~(reg_mcountinhibit[2]);	// @[CSR.scala:551:34, :553:75, Counters.scala:46:33, :47:9, :51:{20,33}]
  wire [57:0] _large_r_T_1 = large_0 + 58'h1;	// @[Counters.scala:50:31, :51:55]
  wire [31:0] _epc_T_1 = ~io_pc | 32'h3;	// @[CSR.scala:1582:{28,31}, :1583:31]
  wire        _GEN_5 = exception & trapToDebug & ~reg_debug;	// @[CSR.scala:453:26, :868:45, :906:119, :960:43, :975:20, :976:24, :977:25, :979:19]
  wire        _GEN_6 = ~exception | trapToDebug;	// @[CSR.scala:476:21, :906:119, :960:43, :975:20, :976:24]
  always @(posedge clock) begin
    if (reset) begin
      reg_mstatus_mpie <= 1'h0;	// @[CSR.scala:373:28]
      reg_mstatus_mie <= 1'h0;	// @[CSR.scala:373:28]
      reg_dcsr_ebreakm <= 1'h0;	// @[CSR.scala:381:25]
      reg_dcsr_cause <= 3'h0;	// @[CSR.scala:378:44, :381:25]
      reg_dcsr_step <= 1'h0;	// @[CSR.scala:381:25]
      reg_debug <= 1'h0;	// @[CSR.scala:453:26]
      reg_mcause <= 32'h0;	// @[CSR.scala:477:27]
      reg_mtvec <= 32'h0;	// @[CSR.scala:483:31]
      reg_mcountinhibit <= 3'h0;	// @[CSR.scala:378:44, :551:34]
      small_0 <= 6'h0;	// @[Counters.scala:45:41]
      large_0 <= 58'h0;	// @[Counters.scala:50:31]
      io_status_cease_r <= 1'h0;	// @[Reg.scala:35:20]
    end
    else begin
      if (csr_wen & (&_decoded_decoded_T)) begin	// @[CSR.scala:1053:19, :1162:18, :1166:39, :1168:23, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
        reg_mstatus_mpie <= _new_dcsr_WIRE[7];	// @[CSR.scala:373:28, :1167:39, :1561:39]
        reg_mstatus_mie <= _new_dcsr_WIRE[3];	// @[CSR.scala:373:28, :1167:39, :1561:39]
      end
      else begin	// @[CSR.scala:1053:19, :1162:18, :1166:39, :1168:23]
        reg_mstatus_mpie <= insn_ret & ~_T_442 | (_GEN_6 ? reg_mstatus_mpie : reg_mstatus_mie);	// @[CSR.scala:373:28, :476:21, :835:83, :975:20, :976:24, :1053:19, :1055:48, :1072:{48,66}, :1077:65]
        if (~insn_ret | _T_442)	// @[CSR.scala:835:83, :975:20, :1053:19, :1055:48, :1072:48]
          reg_mstatus_mie <= _GEN_6 & reg_mstatus_mie;	// @[CSR.scala:373:28, :476:21, :975:20, :976:24]
        else	// @[CSR.scala:975:20, :1053:19, :1055:48]
          reg_mstatus_mie <= reg_mstatus_mpie;	// @[CSR.scala:373:28]
      end
      if (csr_wen & (&_decoded_decoded_T_86)) begin	// @[CSR.scala:381:25, :1162:18, :1259:38, :1261:23, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
        reg_dcsr_ebreakm <= _new_dcsr_WIRE[15];	// @[CSR.scala:381:25, :1260:38, :1561:39]
        reg_dcsr_step <= _new_dcsr_WIRE[2];	// @[CSR.scala:381:25, :1260:38, :1561:39]
      end
      if (_GEN_5) begin	// @[CSR.scala:453:26, :975:20, :976:24, :977:25, :979:19]
        if (reg_singleStepped)	// @[CSR.scala:457:30]
          reg_dcsr_cause <= 3'h4;	// @[CSR.scala:381:25, Mux.scala:47:70]
        else	// @[CSR.scala:457:30]
          reg_dcsr_cause <= {1'h0, causeIsDebugInt ? 2'h3 : causeIsDebugTrigger ? 2'h2 : 2'h1};	// @[CSR.scala:381:25, :903:39, :904:44, :981:{30,58,90}, :1584:39, Cat.scala:33:92]
      end
      reg_debug <= ~(insn_ret & _T_442) & (_GEN_5 | reg_debug);	// @[CSR.scala:453:26, :835:83, :975:20, :976:24, :977:25, :979:19, :1053:19, :1055:48, :1072:{48,66}, :1075:17]
      if (csr_wen & (&_decoded_decoded_T_72))	// @[CSR.scala:975:20, :1162:18, :1224:{40,53}, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
        reg_mcause <= _new_dcsr_WIRE & 32'h8000000F;	// @[CSR.scala:477:27, :1224:62, :1561:39]
      else if (_GEN_6) begin	// @[CSR.scala:476:21, :975:20, :976:24]
      end
      else if (insn_call)	// @[CSR.scala:835:83]
        reg_mcause <= 32'hB;	// @[CSR.scala:477:27, :900:8]
      else if (insn_break)	// @[CSR.scala:835:83]
        reg_mcause <= 32'h3;	// @[CSR.scala:477:27, :1583:31]
      else	// @[CSR.scala:835:83]
        reg_mcause <= io_cause;	// @[CSR.scala:477:27]
      if (csr_wen & (&_decoded_decoded_T_6))	// @[CSR.scala:483:31, :1162:18, :1223:{40,52}, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
        reg_mtvec <= _new_dcsr_WIRE;	// @[CSR.scala:483:31, :1561:39]
      if (csr_wen & (&_decoded_decoded_T_8))	// @[CSR.scala:551:34, :1162:18, :1244:{47,67}, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
        reg_mcountinhibit <= _new_dcsr_WIRE[2:0] & 3'h5;	// @[CSR.scala:551:34, :1244:76, :1561:39, Mux.scala:47:70]
      if (csr_wen) begin	// @[package.scala:73:59]
        if (&_decoded_decoded_T_156)	// @[Cat.scala:33:92, pla.scala:98:74]
          large_0 <= {_new_dcsr_WIRE, large_0[25:0]};	// @[CSR.scala:1561:39, Cat.scala:33:92, Counters.scala:50:31, :68:28]
        else if (&_decoded_decoded_T_94) begin	// @[Cat.scala:33:92, pla.scala:98:74]
          small_0 <= _new_dcsr_WIRE[5:0];	// @[CSR.scala:1561:39, Counters.scala:45:41, :67:11]
          large_0 <= {large_0[57:26], _new_dcsr_WIRE[31:6]};	// @[CSR.scala:1561:39, :1576:47, Counters.scala:50:31, :68:28]
        end
        else begin	// @[pla.scala:98:74]
          if (reg_mcountinhibit[2]) begin	// @[CSR.scala:551:34, :553:75]
          end
          else	// @[CSR.scala:553:75]
            small_0 <= nextSmall[5:0];	// @[Counters.scala:45:41, :46:33, :47:27]
          if (_large_T_2)	// @[Counters.scala:51:33]
            large_0 <= _large_r_T_1;	// @[Counters.scala:50:31, :51:55]
        end
      end
      else begin	// @[package.scala:73:59]
        if (reg_mcountinhibit[2]) begin	// @[CSR.scala:551:34, :553:75]
        end
        else	// @[CSR.scala:553:75]
          small_0 <= nextSmall[5:0];	// @[Counters.scala:45:41, :46:33, :47:27]
        if (_large_T_2)	// @[Counters.scala:51:33]
          large_0 <= _large_r_T_1;	// @[Counters.scala:50:31, :51:55]
      end
      io_status_cease_r <= system_insn & (&{io_rw_addr[2], _GEN_1[3], _GEN_1[4], _GEN_1[5], _GEN_1[6], _GEN_1[7], io_rw_addr[8], io_rw_addr[9], _GEN_1[10], _GEN_1[11]}) | io_status_cease_r;	// @[CSR.scala:818:31, :835:83, Cat.scala:33:92, Reg.scala:35:20, :36:{18,22}, pla.scala:78:21, :90:45, :91:29, :98:74]
    end
    if (csr_wen & (&_decoded_decoded_T_88))	// @[CSR.scala:975:20, :1162:18, :1268:{42,52}, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
      reg_dpc <= ~(~_new_dcsr_WIRE | 32'h3);	// @[CSR.scala:454:20, :1561:39, :1582:{26,28,31}, :1583:31]
    else if (_GEN_5)	// @[CSR.scala:453:26, :975:20, :976:24, :977:25, :979:19]
      reg_dpc <= ~_epc_T_1;	// @[CSR.scala:454:20, :1582:{26,31}]
    if (csr_wen & (&_decoded_decoded_T_90))	// @[CSR.scala:455:26, :1162:18, :1269:{43,59}, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
      reg_dscratch0 <= _new_dcsr_WIRE;	// @[CSR.scala:455:26, :1561:39]
    reg_singleStepped <= _io_singleStep_T_1 & (io_retire | exception | reg_singleStepped);	// @[CSR.scala:457:30, :941:34, :960:43, :967:{36,56}, :968:{25,45}]
    if (csr_wen & (&_decoded_decoded_T_4))	// @[CSR.scala:466:20, :1162:18, :1219:{40,50}, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
      reg_mie <= _new_dcsr_WIRE & 32'h888;	// @[CSR.scala:466:20, :1219:59, :1561:39]
    if (csr_wen & (&_decoded_decoded_T_70))	// @[CSR.scala:975:20, :1162:18, :1220:{40,51}, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
      reg_mepc <= ~(~_new_dcsr_WIRE | 32'h3);	// @[CSR.scala:476:21, :1561:39, :1582:{26,28,31}, :1583:31]
    else if (_GEN_6) begin	// @[CSR.scala:476:21, :975:20, :976:24]
    end
    else	// @[CSR.scala:476:21, :975:20, :976:24]
      reg_mepc <= ~_epc_T_1;	// @[CSR.scala:476:21, :1582:{26,31}]
    if (csr_wen & (&_decoded_decoded_T_74))	// @[CSR.scala:975:20, :1162:18, :1225:{40,52}, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
      reg_mtval <= _new_dcsr_WIRE;	// @[CSR.scala:478:22, :1561:39]
    else if (_GEN_6) begin	// @[CSR.scala:476:21, :975:20, :976:24]
    end
    else if (insn_break)	// @[CSR.scala:835:83]
      reg_mtval <= ~_epc_T_1;	// @[CSR.scala:478:22, :1582:{26,31}]
    else	// @[CSR.scala:835:83]
      reg_mtval <= io_tval;	// @[CSR.scala:478:22]
    if (csr_wen & (&_decoded_decoded_T_68))	// @[CSR.scala:480:25, :1162:18, :1221:{40,55}, Cat.scala:33:92, package.scala:73:59, pla.scala:98:74]
      reg_mscratch <= _new_dcsr_WIRE;	// @[CSR.scala:480:25, :1561:39]
  end // always @(posedge)
  wire [6:0]  nextSmall_1 = {1'h0, small_1} + {6'h0, ~(reg_wfi | io_status_cease_r)};	// @[CSR.scala:542:54, :555:56, :1099:27, Counters.scala:45:41, :46:33, Reg.scala:35:20]
  wire        _large_T_5 = nextSmall_1[6] & ~(reg_mcountinhibit[0]);	// @[CSR.scala:551:34, :552:40, Counters.scala:46:33, :47:9, :51:{20,33}]
  wire [57:0] _large_r_T_3 = large_1 + 58'h1;	// @[Counters.scala:50:31, :51:55]
  always @(posedge io_ungated_clock) begin
    if (reset) begin
      reg_wfi <= 1'h0;	// @[CSR.scala:542:54]
      small_1 <= 6'h0;	// @[Counters.scala:45:41]
      large_1 <= 58'h0;	// @[Counters.scala:50:31]
    end
    else begin
      reg_wfi <= ~((|{_GEN[8], _GEN[4], _GEN[0]}) | io_interrupts_debug | exception) & (system_insn & (&{io_rw_addr[8], _GEN_1[9], _GEN_1[10], _GEN_1[11]}) & ~_io_singleStep_T_1 & ~reg_debug | reg_wfi);	// @[CSR.scala:453:26, :542:54, :575:56, :587:36, :818:31, :868:45, :941:34, :960:43, :963:{36,51,61}, :964:{28,55,69,79}, Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74]
      if (csr_wen) begin	// @[package.scala:73:59]
        if (&_decoded_decoded_T_154)	// @[Cat.scala:33:92, pla.scala:98:74]
          large_1 <= {_new_dcsr_WIRE, large_1[25:0]};	// @[CSR.scala:1098:11, :1561:39, Counters.scala:50:31, :68:28]
        else if (&_decoded_decoded_T_92) begin	// @[Cat.scala:33:92, pla.scala:98:74]
          small_1 <= _new_dcsr_WIRE[5:0];	// @[CSR.scala:1561:39, Counters.scala:45:41, :67:11]
          large_1 <= {large_1[57:26], _new_dcsr_WIRE[31:6]};	// @[CSR.scala:1561:39, :1576:47, Counters.scala:50:31, :68:28]
        end
        else begin	// @[pla.scala:98:74]
          if (reg_mcountinhibit[0]) begin	// @[CSR.scala:551:34, :552:40]
          end
          else	// @[CSR.scala:552:40]
            small_1 <= nextSmall_1[5:0];	// @[Counters.scala:45:41, :46:33, :47:27]
          if (_large_T_5)	// @[Counters.scala:51:33]
            large_1 <= _large_r_T_3;	// @[Counters.scala:50:31, :51:55]
        end
      end
      else begin	// @[package.scala:73:59]
        if (reg_mcountinhibit[0]) begin	// @[CSR.scala:551:34, :552:40]
        end
        else	// @[CSR.scala:552:40]
          small_1 <= nextSmall_1[5:0];	// @[Counters.scala:45:41, :46:33, :47:27]
        if (_large_T_5)	// @[Counters.scala:51:33]
          large_1 <= _large_r_T_3;	// @[Counters.scala:50:31, :51:55]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire  [2:0]  _T_305 = {1'h0, {1'h0, insn_ret} + {1'h0, insn_call}} + {1'h0, {1'h0, insn_break} + {1'h0, io_exception}};	// @[Bitwise.scala:51:90, CSR.scala:835:83]
    always @(posedge clock) begin	// @[CSR.scala:961:9]
      if (~reset & (|(_T_305[2:1]))) begin	// @[Bitwise.scala:51:90, CSR.scala:961:{9,79}]
        if (`ASSERT_VERBOSE_COND_)	// @[CSR.scala:961:9]
          $error("Assertion failed: these conditions must be mutually exclusive\n    at CSR.scala:961 assert(PopCount(insn_ret :: insn_call :: insn_break :: io.exception :: Nil) <= 1.U, \"these conditions must be mutually exclusive\")\n");	// @[CSR.scala:961:9]
        if (`STOP_COND_)	// @[CSR.scala:961:9]
          $fatal;	// @[CSR.scala:961:9]
      end
      if (~reset & ~(~reg_singleStepped | ~io_retire)) begin	// @[CSR.scala:457:30, :970:{9,10,29,42}]
        if (`ASSERT_VERBOSE_COND_)	// @[CSR.scala:970:9]
          $error("Assertion failed\n    at CSR.scala:970 assert(!reg_singleStepped || io.retire === 0.U)\n");	// @[CSR.scala:970:9]
        if (`STOP_COND_)	// @[CSR.scala:970:9]
          $fatal;	// @[CSR.scala:970:9]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    logic [31:0] _RANDOM_26;
    logic [31:0] _RANDOM_27;
    logic [31:0] _RANDOM_28;
    logic [31:0] _RANDOM_29;
    logic [31:0] _RANDOM_30;
    logic [31:0] _RANDOM_31;
    logic [31:0] _RANDOM_32;
    logic [31:0] _RANDOM_33;
    logic [31:0] _RANDOM_34;
    logic [31:0] _RANDOM_35;
    logic [31:0] _RANDOM_36;
    logic [31:0] _RANDOM_37;
    logic [31:0] _RANDOM_38;
    logic [31:0] _RANDOM_39;
    logic [31:0] _RANDOM_40;
    logic [31:0] _RANDOM_41;
    logic [31:0] _RANDOM_42;
    logic [31:0] _RANDOM_43;
    logic [31:0] _RANDOM_44;
    logic [31:0] _RANDOM_45;
    logic [31:0] _RANDOM_46;
    logic [31:0] _RANDOM_47;
    logic [31:0] _RANDOM_48;
    logic [31:0] _RANDOM_49;
    logic [31:0] _RANDOM_50;
    logic [31:0] _RANDOM_51;
    logic [31:0] _RANDOM_52;
    logic [31:0] _RANDOM_53;
    logic [31:0] _RANDOM_54;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        _RANDOM_36 = `RANDOM;
        _RANDOM_37 = `RANDOM;
        _RANDOM_38 = `RANDOM;
        _RANDOM_39 = `RANDOM;
        _RANDOM_40 = `RANDOM;
        _RANDOM_41 = `RANDOM;
        _RANDOM_42 = `RANDOM;
        _RANDOM_43 = `RANDOM;
        _RANDOM_44 = `RANDOM;
        _RANDOM_45 = `RANDOM;
        _RANDOM_46 = `RANDOM;
        _RANDOM_47 = `RANDOM;
        _RANDOM_48 = `RANDOM;
        _RANDOM_49 = `RANDOM;
        _RANDOM_50 = `RANDOM;
        _RANDOM_51 = `RANDOM;
        _RANDOM_52 = `RANDOM;
        _RANDOM_53 = `RANDOM;
        _RANDOM_54 = `RANDOM;
        reg_mstatus_mpie = _RANDOM_3[1];	// @[CSR.scala:373:28]
        reg_mstatus_mie = _RANDOM_3[5];	// @[CSR.scala:373:28]
        reg_dcsr_ebreakm = _RANDOM_3[25];	// @[CSR.scala:373:28, :381:25]
        reg_dcsr_cause = _RANDOM_4[2:0];	// @[CSR.scala:381:25]
        reg_dcsr_step = _RANDOM_4[6];	// @[CSR.scala:381:25]
        reg_debug = _RANDOM_4[9];	// @[CSR.scala:381:25, :453:26]
        reg_dpc = {_RANDOM_4[31:10], _RANDOM_5[9:0]};	// @[CSR.scala:381:25, :454:20]
        reg_dscratch0 = {_RANDOM_5[31:10], _RANDOM_6[9:0]};	// @[CSR.scala:454:20, :455:26]
        reg_singleStepped = _RANDOM_6[10];	// @[CSR.scala:455:26, :457:30]
        reg_mie = _RANDOM_12;	// @[CSR.scala:466:20]
        reg_mepc = {_RANDOM_15[31:16], _RANDOM_16[15:0]};	// @[CSR.scala:476:21]
        reg_mcause = {_RANDOM_16[31:16], _RANDOM_17[15:0]};	// @[CSR.scala:476:21, :477:27]
        reg_mtval = {_RANDOM_17[31:16], _RANDOM_18[15:0]};	// @[CSR.scala:477:27, :478:22]
        reg_mscratch = {_RANDOM_19[31:16], _RANDOM_20[15:0]};	// @[CSR.scala:480:25]
        reg_mtvec = {_RANDOM_20[31:16], _RANDOM_21[15:0]};	// @[CSR.scala:480:25, :483:31]
        reg_wfi = _RANDOM_49[7];	// @[CSR.scala:542:54]
        reg_mcountinhibit = _RANDOM_49[18:16];	// @[CSR.scala:542:54, :551:34]
        small_0 = _RANDOM_49[24:19];	// @[CSR.scala:542:54, Counters.scala:45:41]
        large_0 = {_RANDOM_49[31:25], _RANDOM_50, _RANDOM_51[18:0]};	// @[CSR.scala:542:54, Counters.scala:50:31]
        small_1 = _RANDOM_51[24:19];	// @[Counters.scala:45:41, :50:31]
        large_1 = {_RANDOM_51[31:25], _RANDOM_52, _RANDOM_53[18:0]};	// @[Counters.scala:50:31]
        io_status_cease_r = _RANDOM_54[18];	// @[Reg.scala:35:20]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_rw_rdata = _io_rw_rdata_output;	// @[Mux.scala:27:73]
  assign io_eret = _exception_T | insn_ret;	// @[CSR.scala:835:83, :940:{24,38}]
  assign io_evec = insn_ret ? (_T_442 ? ~(~reg_dpc | 32'h3) : ~(~reg_mepc | 32'h3)) : trapToDebug ? {20'h0, reg_debug ? {8'h80, ~insn_break, 3'h0} : 12'h800} : {read_mtvec[0] & cause[31] & cause[7:5] == 3'h0 ? {read_mtvec[31:7], cause[4:0]} : read_mtvec[31:2], 2'h0};	// @[CSR.scala:378:44, :453:26, :454:20, :476:21, :834:44, :835:83, :900:8, :902:25, :903:30, :906:119, :909:{22,37}, :919:32, :920:33, :921:{24,55,70,94}, :922:{8,38}, :935:17, :936:11, :1053:19, :1055:48, :1072:{48,66}, :1076:15, :1077:65, :1583:{26,28,31}, Cat.scala:33:92, package.scala:166:35]
  assign io_time = _GEN_2;	// @[CSR.scala:1098:11]
  assign io_interrupt = ((io_interrupts_debug | _GEN_0[8] | _GEN_0[0] | _GEN_0[4]) & ~_io_singleStep_T_1 | reg_singleStepped) & ~(reg_debug | io_status_cease_r);	// @[CSR.scala:453:26, :457:30, :581:25, :587:{33,36,51,73,76,88}, :941:34, :1555:{76,90}, Reg.scala:35:20]
  assign io_interrupt_cause = {28'h0, io_interrupts_debug ? 4'hE : _GEN_0[8] ? 4'hB : _GEN_0[0] ? 4'h3 : _GEN_0[4] ? 4'h7 : 4'h4} - 32'h80000000;	// @[CSR.scala:581:25, :586:63, :1555:76, Mux.scala:47:70]
endmodule


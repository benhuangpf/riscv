// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SodorRequestRouter(
  input         io_masterPort_resp_valid,
  input  [31:0] io_masterPort_resp_bits_data,
  input         io_scratchPort_resp_valid,
  input  [31:0] io_scratchPort_resp_bits_data,
  input         io_corePort_req_valid,
  input  [31:0] io_corePort_req_bits_addr,
                io_corePort_req_bits_data,
  input         io_corePort_req_bits_fcn,
  input  [2:0]  io_corePort_req_bits_typ,
  input  [31:0] io_respAddress,
  output        io_masterPort_req_valid,
  output [31:0] io_masterPort_req_bits_addr,
                io_masterPort_req_bits_data,
  output        io_masterPort_req_bits_fcn,
  output [2:0]  io_masterPort_req_bits_typ,
  output        io_scratchPort_req_valid,
  output [31:0] io_scratchPort_req_bits_addr,
                io_scratchPort_req_bits_data,
  output        io_scratchPort_req_bits_fcn,
  output [2:0]  io_scratchPort_req_bits_typ,
  output        io_corePort_resp_valid,
  output [31:0] io_corePort_resp_bits_data
);

  wire _io_masterPort_req_valid_T = io_corePort_req_bits_addr[31:18] != 14'h2000;	// @[Parameters.scala:137:{31,65}]
  wire resp_in_range = io_respAddress[31:18] == 14'h2000;	// @[Parameters.scala:137:{31,65}]
  assign io_masterPort_req_valid = io_corePort_req_valid & _io_masterPort_req_valid_T;	// @[Parameters.scala:137:65, scratchpad_adapter.scala:90:52]
  assign io_masterPort_req_bits_addr = io_corePort_req_bits_addr;
  assign io_masterPort_req_bits_data = io_corePort_req_bits_data;
  assign io_masterPort_req_bits_fcn = io_corePort_req_bits_fcn;
  assign io_masterPort_req_bits_typ = io_corePort_req_bits_typ;
  assign io_scratchPort_req_valid = io_corePort_req_valid & ~_io_masterPort_req_valid_T;	// @[Parameters.scala:137:65, scratchpad_adapter.scala:91:53]
  assign io_scratchPort_req_bits_addr = io_corePort_req_bits_addr;
  assign io_scratchPort_req_bits_data = io_corePort_req_bits_data;
  assign io_scratchPort_req_bits_fcn = io_corePort_req_bits_fcn;
  assign io_scratchPort_req_bits_typ = io_corePort_req_bits_typ;
  assign io_corePort_resp_valid = resp_in_range ? io_scratchPort_resp_valid : io_masterPort_resp_valid;	// @[Parameters.scala:137:65, scratchpad_adapter.scala:98:32]
  assign io_corePort_resp_bits_data = resp_in_range ? io_scratchPort_resp_bits_data : io_masterPort_resp_bits_data;	// @[Parameters.scala:137:65, scratchpad_adapter.scala:97:31]
endmodule


// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module MemReader(
  input  [20:0] io_addr,
  input  [1:0]  io_size,
  input         io_signed,
  input  [7:0]  io_mem_data_0,
                io_mem_data_1,
                io_mem_data_2,
                io_mem_data_3,
  output [31:0] io_data,
  output [18:0] io_mem_addr
);

  wire [3:0][1:0] _GEN = {2'h3, 2'h3, 2'h1, 2'h0};	// @[Mux.scala:81:{58,61}]
  wire [31:0]     _shiftedVec_T_3 = {io_mem_data_0, io_mem_data_1, io_mem_data_2, io_mem_data_3} >> {27'h0, io_addr[1:0], 3'h0};	// @[Cat.scala:33:92, memory.scala:100:46, :107:{50,63}]
  wire [1:0]      bytes = _GEN[io_size];	// @[Mux.scala:81:{58,61}]
//   wire [1:0]      bytes = 
//     (io_size == 2'h0) ? 2'h3:
//     (io_size == 2'h1) ? 2'h3:
//     (io_size == 2'h2) ? 2'h1:2'h0;
  wire [3:0][7:0] _GEN_0 = {{_shiftedVec_T_3[7:0]}, {_shiftedVec_T_3[15:8]}, {_shiftedVec_T_3[23:16]}, {_shiftedVec_T_3[31:24]}};	// @[Cat.scala:33:92, memory.scala:107:50, :111:50]  
  wire [10:0]     _masks_mask_T = 11'h1F << bytes;	// @[Mux.scala:81:58, memory.scala:79:38]
//   wire            _maskedVec_T_24 = _GEN_0[2'h3 - bytes][7] & io_signed;	// @[Mux.scala:81:58, memory.scala:111:{36,50}, :114:22]
  wire [3:0][7:0] _maskedVec_T_24 = (bytes == 2'h0) ? _GEN_0[3][7] & io_signed:
                                    (bytes == 2'h1) ? _GEN_0[2][7] & io_signed:
                                    (bytes == 2'h2) ? _GEN_0[1][7] & io_signed:
                                    _GEN_0[0][7] & io_signed;
  assign io_data = {_maskedVec_T_24 ? _shiftedVec_T_3[31:24] | ~{8{_masks_mask_T[7]}} : _shiftedVec_T_3[31:24] & {8{_masks_mask_T[7]}}, _maskedVec_T_24 ? _shiftedVec_T_3[23:16] | ~{8{_masks_mask_T[6]}} : _shiftedVec_T_3[23:16] & {8{_masks_mask_T[6]}}, _maskedVec_T_24 ? _shiftedVec_T_3[15:8] | ~{8{_masks_mask_T[5]}} : _shiftedVec_T_3[15:8] & {8{_masks_mask_T[5]}}, _maskedVec_T_24 ? _shiftedVec_T_3[7:0] | ~{8{_masks_mask_T[4]}} : _shiftedVec_T_3[7:0] & {8{_masks_mask_T[4]}}};	// @[Bitwise.scala:77:12, Cat.scala:33:92, memory.scala:79:38, :80:55, :81:22, :107:50, :114:{16,22,40,42,63}]
  assign io_mem_addr = io_addr[20:2];	// @[memory.scala:105:32]
endmodule


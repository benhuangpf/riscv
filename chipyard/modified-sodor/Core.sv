// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module Core(
  input         clock,
                reset,
                io_imem_resp_valid,
  input  [31:0] io_imem_resp_bits_data,
  input         io_dmem_resp_valid,
  input  [31:0] io_dmem_resp_bits_data,
  input         io_interrupt_debug,
                io_interrupt_mtip,
                io_interrupt_msip,
                io_interrupt_meip,
                io_hartid,
  output        io_imem_req_valid,
  output [31:0] io_imem_req_bits_addr,
  output        io_dmem_req_valid,
  output [31:0] io_dmem_req_bits_addr,
                io_dmem_req_bits_data,
  output        io_dmem_req_bits_fcn,
  output [2:0]  io_dmem_req_bits_typ
);

  wire [31:0] _d_io_dat_inst;	// @[core.scala:42:18]
  wire        _d_io_dat_imiss;	// @[core.scala:42:18]
  wire        _d_io_dat_br_eq;	// @[core.scala:42:18]
  wire        _d_io_dat_br_lt;	// @[core.scala:42:18]
  wire        _d_io_dat_br_ltu;	// @[core.scala:42:18]
  wire        _d_io_dat_csr_eret;	// @[core.scala:42:18]
  wire        _d_io_dat_csr_interrupt;	// @[core.scala:42:18]
  wire        _d_io_dat_inst_misaligned;	// @[core.scala:42:18]
  wire [2:0]  _d_io_dat_mem_address_low;	// @[core.scala:42:18]
  wire        _c_io_ctl_stall;	// @[core.scala:41:18]
  wire        _c_io_ctl_dmiss;	// @[core.scala:41:18]
  wire [2:0]  _c_io_ctl_pc_sel;	// @[core.scala:41:18]
  wire [1:0]  _c_io_ctl_op1_sel;	// @[core.scala:41:18]
  wire [1:0]  _c_io_ctl_op2_sel;	// @[core.scala:41:18]
  wire [3:0]  _c_io_ctl_alu_fun;	// @[core.scala:41:18]
  wire [1:0]  _c_io_ctl_wb_sel;	// @[core.scala:41:18]
  wire        _c_io_ctl_rf_wen;	// @[core.scala:41:18]
  wire [2:0]  _c_io_ctl_csr_cmd;	// @[core.scala:41:18]
  wire        _c_io_ctl_exception;	// @[core.scala:41:18]
  wire [31:0] _c_io_ctl_exception_cause;	// @[core.scala:41:18]
  wire [2:0]  _c_io_ctl_pc_sel_no_xept;	// @[core.scala:41:18]
  CtlPath c (	// @[core.scala:41:18]
    .clock                  (clock),
    .reset                  (reset),
    .io_imem_resp_valid     (io_imem_resp_valid),
    .io_dmem_resp_valid     (io_dmem_resp_valid),
    .io_dat_inst            (_d_io_dat_inst),	// @[core.scala:42:18]
    .io_dat_imiss           (_d_io_dat_imiss),	// @[core.scala:42:18]
    .io_dat_br_eq           (_d_io_dat_br_eq),	// @[core.scala:42:18]
    .io_dat_br_lt           (_d_io_dat_br_lt),	// @[core.scala:42:18]
    .io_dat_br_ltu          (_d_io_dat_br_ltu),	// @[core.scala:42:18]
    .io_dat_csr_eret        (_d_io_dat_csr_eret),	// @[core.scala:42:18]
    .io_dat_csr_interrupt   (_d_io_dat_csr_interrupt),	// @[core.scala:42:18]
    .io_dat_inst_misaligned (_d_io_dat_inst_misaligned),	// @[core.scala:42:18]
    .io_dat_mem_address_low (_d_io_dat_mem_address_low),	// @[core.scala:42:18]
    .io_dmem_req_valid      (io_dmem_req_valid),
    .io_dmem_req_bits_fcn   (io_dmem_req_bits_fcn),
    .io_dmem_req_bits_typ   (io_dmem_req_bits_typ),
    .io_ctl_stall           (_c_io_ctl_stall),
    .io_ctl_dmiss           (_c_io_ctl_dmiss),
    .io_ctl_pc_sel          (_c_io_ctl_pc_sel),
    .io_ctl_op1_sel         (_c_io_ctl_op1_sel),
    .io_ctl_op2_sel         (_c_io_ctl_op2_sel),
    .io_ctl_alu_fun         (_c_io_ctl_alu_fun),
    .io_ctl_wb_sel          (_c_io_ctl_wb_sel),
    .io_ctl_rf_wen          (_c_io_ctl_rf_wen),
    .io_ctl_csr_cmd         (_c_io_ctl_csr_cmd),
    .io_ctl_exception       (_c_io_ctl_exception),
    .io_ctl_exception_cause (_c_io_ctl_exception_cause),
    .io_ctl_pc_sel_no_xept  (_c_io_ctl_pc_sel_no_xept)
  );
  DatPath d (	// @[core.scala:42:18]
    .clock                  (clock),
    .reset                  (reset),
    .io_imem_resp_valid     (io_imem_resp_valid),
    .io_imem_resp_bits_data (io_imem_resp_bits_data),
    .io_dmem_resp_bits_data (io_dmem_resp_bits_data),
    .io_ctl_stall           (_c_io_ctl_stall),	// @[core.scala:41:18]
    .io_ctl_dmiss           (_c_io_ctl_dmiss),	// @[core.scala:41:18]
    .io_ctl_pc_sel          (_c_io_ctl_pc_sel),	// @[core.scala:41:18]
    .io_ctl_op1_sel         (_c_io_ctl_op1_sel),	// @[core.scala:41:18]
    .io_ctl_op2_sel         (_c_io_ctl_op2_sel),	// @[core.scala:41:18]
    .io_ctl_alu_fun         (_c_io_ctl_alu_fun),	// @[core.scala:41:18]
    .io_ctl_wb_sel          (_c_io_ctl_wb_sel),	// @[core.scala:41:18]
    .io_ctl_rf_wen          (_c_io_ctl_rf_wen),	// @[core.scala:41:18]
    .io_ctl_csr_cmd         (_c_io_ctl_csr_cmd),	// @[core.scala:41:18]
    .io_ctl_exception       (_c_io_ctl_exception),	// @[core.scala:41:18]
    .io_ctl_exception_cause (_c_io_ctl_exception_cause),	// @[core.scala:41:18]
    .io_ctl_pc_sel_no_xept  (_c_io_ctl_pc_sel_no_xept),	// @[core.scala:41:18]
    .io_interrupt_debug     (io_interrupt_debug),
    .io_interrupt_mtip      (io_interrupt_mtip),
    .io_interrupt_msip      (io_interrupt_msip),
    .io_interrupt_meip      (io_interrupt_meip),
    .io_hartid              (io_hartid),
    .io_imem_req_valid      (io_imem_req_valid),
    .io_imem_req_bits_addr  (io_imem_req_bits_addr),
    .io_dmem_req_bits_addr  (io_dmem_req_bits_addr),
    .io_dmem_req_bits_data  (io_dmem_req_bits_data),
    .io_dat_inst            (_d_io_dat_inst),
    .io_dat_imiss           (_d_io_dat_imiss),
    .io_dat_br_eq           (_d_io_dat_br_eq),
    .io_dat_br_lt           (_d_io_dat_br_lt),
    .io_dat_br_ltu          (_d_io_dat_br_ltu),
    .io_dat_csr_eret        (_d_io_dat_csr_eret),
    .io_dat_csr_interrupt   (_d_io_dat_csr_interrupt),
    .io_dat_inst_misaligned (_d_io_dat_inst_misaligned),
    .io_dat_mem_address_low (_d_io_dat_mem_address_low)
  );
endmodule


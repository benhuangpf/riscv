// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module AsyncScratchPadMemory(
  input         clock,
                io_core_ports_0_req_valid,
  input  [31:0] io_core_ports_0_req_bits_addr,
                io_core_ports_0_req_bits_data,
  input         io_core_ports_0_req_bits_fcn,
  input  [2:0]  io_core_ports_0_req_bits_typ,
  input         io_core_ports_1_req_valid,
  input  [31:0] io_core_ports_1_req_bits_addr,
  input  [2:0]  io_core_ports_1_req_bits_typ,
  input         io_debug_port_req_valid,
  input  [31:0] io_debug_port_req_bits_addr,
                io_debug_port_req_bits_data,
  input         io_debug_port_req_bits_fcn,
  input  [2:0]  io_debug_port_req_bits_typ,
  output        io_core_ports_0_resp_valid,
  output [31:0] io_core_ports_0_resp_bits_data,
  output        io_core_ports_1_resp_valid,
  output [31:0] io_core_ports_1_resp_bits_data,
  output        io_debug_port_resp_valid,
  output [31:0] io_debug_port_resp_bits_data
);

  wire [18:0] _memwriter_1_io_mem_addr;	// @[memory.scala:156:29]
  wire [7:0]  _memwriter_1_io_mem_data_0;	// @[memory.scala:156:29]
  wire [7:0]  _memwriter_1_io_mem_data_1;	// @[memory.scala:156:29]
  wire [7:0]  _memwriter_1_io_mem_data_2;	// @[memory.scala:156:29]
  wire [7:0]  _memwriter_1_io_mem_data_3;	// @[memory.scala:156:29]
  wire        _memwriter_1_io_mem_masks_0;	// @[memory.scala:156:29]
  wire        _memwriter_1_io_mem_masks_1;	// @[memory.scala:156:29]
  wire        _memwriter_1_io_mem_masks_2;	// @[memory.scala:156:29]
  wire        _memwriter_1_io_mem_masks_3;	// @[memory.scala:156:29]
  wire [18:0] _io_debug_port_resp_bits_data_memreader_io_mem_addr;	// @[memory.scala:120:29]
  wire [18:0] _io_core_ports_1_resp_bits_data_memreader_io_mem_addr;	// @[memory.scala:120:29]
  wire [18:0] _memwriter_io_mem_addr;	// @[memory.scala:156:29]
  wire [7:0]  _memwriter_io_mem_data_0;	// @[memory.scala:156:29]
  wire [7:0]  _memwriter_io_mem_data_1;	// @[memory.scala:156:29]
  wire [7:0]  _memwriter_io_mem_data_2;	// @[memory.scala:156:29]
  wire [7:0]  _memwriter_io_mem_data_3;	// @[memory.scala:156:29]
  wire        _memwriter_io_mem_masks_0;	// @[memory.scala:156:29]
  wire        _memwriter_io_mem_masks_1;	// @[memory.scala:156:29]
  wire        _memwriter_io_mem_masks_2;	// @[memory.scala:156:29]
  wire        _memwriter_io_mem_masks_3;	// @[memory.scala:156:29]
  wire [18:0] _io_core_ports_0_resp_bits_data_memreader_io_mem_addr;	// @[memory.scala:120:29]
  wire [31:0] _mem_ext_R0_data;	// @[memory.scala:73:31]
  wire [31:0] _mem_ext_R1_data;	// @[memory.scala:73:31]
  wire [31:0] _mem_ext_R2_data;	// @[memory.scala:73:31]
  wire        mem_MPORT_en = io_core_ports_0_req_valid & io_core_ports_0_req_bits_fcn;	// @[memory.scala:193:51]
  wire [2:0]  _GEN = io_core_ports_0_req_bits_typ - 3'h1;	// @[memory.scala:60:24]
  wire [2:0]  _GEN_0 = io_core_ports_1_req_bits_typ - 3'h1;	// @[memory.scala:60:24]
  wire        mem_MPORT_1_en = io_debug_port_req_valid & io_debug_port_req_bits_fcn;	// @[memory.scala:210:49]
  wire [2:0]  _GEN_1 = io_debug_port_req_bits_typ - 3'h1;	// @[memory.scala:60:24]
  mem_combMem mem_ext (	// @[memory.scala:73:31]
    .R0_addr (_io_core_ports_0_resp_bits_data_memreader_io_mem_addr),	// @[memory.scala:120:29]
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R1_addr (_io_core_ports_1_resp_bits_data_memreader_io_mem_addr),	// @[memory.scala:120:29]
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R2_addr (_io_debug_port_resp_bits_data_memreader_io_mem_addr),	// @[memory.scala:120:29]
    .R2_en   (1'h1),
    .R2_clk  (clock),
    .W0_addr (_memwriter_io_mem_addr),	// @[memory.scala:156:29]
    .W0_en   (mem_MPORT_en),	// @[memory.scala:193:51]
    .W0_clk  (clock),
    .W0_data ({_memwriter_io_mem_data_3, _memwriter_io_mem_data_2, _memwriter_io_mem_data_1, _memwriter_io_mem_data_0}),	// @[memory.scala:73:31, :156:29]
    .W0_mask ({_memwriter_io_mem_masks_3, _memwriter_io_mem_masks_2, _memwriter_io_mem_masks_1, _memwriter_io_mem_masks_0}),	// @[memory.scala:73:31, :156:29]
    .W1_addr (_memwriter_1_io_mem_addr),	// @[memory.scala:156:29]
    .W1_en   (mem_MPORT_1_en),	// @[memory.scala:210:49]
    .W1_clk  (clock),
    .W1_data ({_memwriter_1_io_mem_data_3, _memwriter_1_io_mem_data_2, _memwriter_1_io_mem_data_1, _memwriter_1_io_mem_data_0}),	// @[memory.scala:73:31, :156:29]
    .W1_mask ({_memwriter_1_io_mem_masks_3, _memwriter_1_io_mem_masks_2, _memwriter_1_io_mem_masks_1, _memwriter_1_io_mem_masks_0}),	// @[memory.scala:73:31, :156:29]
    .R0_data (_mem_ext_R0_data),
    .R1_data (_mem_ext_R1_data),
    .R2_data (_mem_ext_R2_data)
  );
  MemReader io_core_ports_0_resp_bits_data_memreader (	// @[memory.scala:120:29]
    .io_addr       (io_core_ports_0_req_bits_addr[20:0]),	// @[memory.scala:121:25]
    .io_size       (_GEN[1:0]),	// @[memory.scala:60:{24,30}]
    .io_signed     (~(_GEN[2])),	// @[memory.scala:60:24, :61:{21,27,33}]
    .io_mem_data_0 (_mem_ext_R0_data[7:0]),	// @[memory.scala:73:31]
    .io_mem_data_1 (_mem_ext_R0_data[15:8]),	// @[memory.scala:73:31]
    .io_mem_data_2 (_mem_ext_R0_data[23:16]),	// @[memory.scala:73:31]
    .io_mem_data_3 (_mem_ext_R0_data[31:24]),	// @[memory.scala:73:31]
    .io_data       (io_core_ports_0_resp_bits_data),
    .io_mem_addr   (_io_core_ports_0_resp_bits_data_memreader_io_mem_addr)
  );
  MemWriter memwriter (	// @[memory.scala:156:29]
    .io_addr        (io_core_ports_0_req_bits_addr[20:0]),	// @[memory.scala:121:25]
    .io_data        (io_core_ports_0_req_bits_data),
    .io_size        (_GEN[1:0]),	// @[memory.scala:60:{24,30}]
    .io_en          (mem_MPORT_en),	// @[memory.scala:193:51]
    .io_mem_addr    (_memwriter_io_mem_addr),
    .io_mem_data_0  (_memwriter_io_mem_data_0),
    .io_mem_data_1  (_memwriter_io_mem_data_1),
    .io_mem_data_2  (_memwriter_io_mem_data_2),
    .io_mem_data_3  (_memwriter_io_mem_data_3),
    .io_mem_masks_0 (_memwriter_io_mem_masks_0),
    .io_mem_masks_1 (_memwriter_io_mem_masks_1),
    .io_mem_masks_2 (_memwriter_io_mem_masks_2),
    .io_mem_masks_3 (_memwriter_io_mem_masks_3)
  );
  MemReader io_core_ports_1_resp_bits_data_memreader (	// @[memory.scala:120:29]
    .io_addr       (io_core_ports_1_req_bits_addr[20:0]),	// @[memory.scala:121:25]
    .io_size       (_GEN_0[1:0]),	// @[memory.scala:60:{24,30}]
    .io_signed     (~(_GEN_0[2])),	// @[memory.scala:60:24, :61:{21,27,33}]
    .io_mem_data_0 (_mem_ext_R1_data[7:0]),	// @[memory.scala:73:31]
    .io_mem_data_1 (_mem_ext_R1_data[15:8]),	// @[memory.scala:73:31]
    .io_mem_data_2 (_mem_ext_R1_data[23:16]),	// @[memory.scala:73:31]
    .io_mem_data_3 (_mem_ext_R1_data[31:24]),	// @[memory.scala:73:31]
    .io_data       (io_core_ports_1_resp_bits_data),
    .io_mem_addr   (_io_core_ports_1_resp_bits_data_memreader_io_mem_addr)
  );
  MemReader io_debug_port_resp_bits_data_memreader (	// @[memory.scala:120:29]
    .io_addr       (io_debug_port_req_bits_addr[20:0]),	// @[memory.scala:121:25]
    .io_size       (_GEN_1[1:0]),	// @[memory.scala:60:{24,30}]
    .io_signed     (~(_GEN_1[2])),	// @[memory.scala:60:24, :61:{21,27,33}]
    .io_mem_data_0 (_mem_ext_R2_data[7:0]),	// @[memory.scala:73:31]
    .io_mem_data_1 (_mem_ext_R2_data[15:8]),	// @[memory.scala:73:31]
    .io_mem_data_2 (_mem_ext_R2_data[23:16]),	// @[memory.scala:73:31]
    .io_mem_data_3 (_mem_ext_R2_data[31:24]),	// @[memory.scala:73:31]
    .io_data       (io_debug_port_resp_bits_data),
    .io_mem_addr   (_io_debug_port_resp_bits_data_memreader_io_mem_addr)
  );
  MemWriter memwriter_1 (	// @[memory.scala:156:29]
    .io_addr        (io_debug_port_req_bits_addr[20:0]),	// @[memory.scala:121:25]
    .io_data        (io_debug_port_req_bits_data),
    .io_size        (_GEN_1[1:0]),	// @[memory.scala:60:{24,30}]
    .io_en          (mem_MPORT_1_en),	// @[memory.scala:210:49]
    .io_mem_addr    (_memwriter_1_io_mem_addr),
    .io_mem_data_0  (_memwriter_1_io_mem_data_0),
    .io_mem_data_1  (_memwriter_1_io_mem_data_1),
    .io_mem_data_2  (_memwriter_1_io_mem_data_2),
    .io_mem_data_3  (_memwriter_1_io_mem_data_3),
    .io_mem_masks_0 (_memwriter_1_io_mem_masks_0),
    .io_mem_masks_1 (_memwriter_1_io_mem_masks_1),
    .io_mem_masks_2 (_memwriter_1_io_mem_masks_2),
    .io_mem_masks_3 (_memwriter_1_io_mem_masks_3)
  );
  assign io_core_ports_0_resp_valid = io_core_ports_0_req_valid;
  assign io_core_ports_1_resp_valid = io_core_ports_1_req_valid;
  assign io_debug_port_resp_valid = io_debug_port_req_valid;
endmodule


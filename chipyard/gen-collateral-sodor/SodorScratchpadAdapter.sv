// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SodorScratchpadAdapter(
  input         clock,
                reset,
                io_slavePort_req_valid,
  input  [31:0] io_slavePort_req_bits_addr,
  input  [4:0]  io_slavePort_req_bits_cmd,
  input  [1:0]  io_slavePort_req_bits_size,
  input         io_slavePort_s1_kill,
  input  [31:0] io_slavePort_s1_data_data,
  input         io_memPort_resp_valid,
  input  [31:0] io_memPort_resp_bits_data,
  output        io_slavePort_resp_valid,
  output [31:0] io_slavePort_resp_bits_data_raw,
  output        io_memPort_req_valid,
  output [31:0] io_memPort_req_bits_addr,
                io_memPort_req_bits_data,
  output        io_memPort_req_bits_fcn,
  output [2:0]  io_memPort_req_bits_typ
);

  reg         s1_slave_req_valid;	// @[scratchpad_adapter.scala:36:35]
  reg  [4:0]  s1_slave_cmd;	// @[scratchpad_adapter.scala:37:29]
  reg  [31:0] s1_slave_req_addr;	// @[scratchpad_adapter.scala:38:29]
  reg  [1:0]  s1_slave_req_size;	// @[scratchpad_adapter.scala:38:29]
  wire        _io_memPort_req_bits_fcn_T = s1_slave_cmd == 5'h0;	// @[scratchpad_adapter.scala:37:29, :53:62]
  reg         io_slavePort_resp_valid_REG;	// @[scratchpad_adapter.scala:54:33]
  reg  [31:0] io_slavePort_resp_bits_data_raw_REG;	// @[scratchpad_adapter.scala:58:32]
  always @(posedge clock) begin
    if (reset) begin
      s1_slave_req_valid <= 1'h0;	// @[scratchpad_adapter.scala:36:35]
      io_slavePort_resp_valid_REG <= 1'h0;	// @[scratchpad_adapter.scala:54:33]
    end
    else begin
      s1_slave_req_valid <= io_slavePort_req_valid;	// @[scratchpad_adapter.scala:36:35]
      io_slavePort_resp_valid_REG <= io_memPort_resp_valid;	// @[scratchpad_adapter.scala:54:33]
    end
    s1_slave_cmd <= io_slavePort_req_bits_cmd;	// @[scratchpad_adapter.scala:37:29]
    s1_slave_req_addr <= io_slavePort_req_bits_addr;	// @[scratchpad_adapter.scala:38:29]
    s1_slave_req_size <= io_slavePort_req_bits_size;	// @[scratchpad_adapter.scala:38:29]
    io_slavePort_resp_bits_data_raw_REG <= io_memPort_resp_bits_data;	// @[scratchpad_adapter.scala:58:32]
  end // always @(posedge)
  `ifndef SYNTHESIS
    always @(posedge clock) begin	// @[scratchpad_adapter.scala:70:10]
      if (~reset & (&s1_slave_req_size)) begin	// @[scratchpad_adapter.scala:38:29, :70:{10,29}]
        if (`ASSERT_VERBOSE_COND_)	// @[scratchpad_adapter.scala:70:10]
          $error("Assertion failed: Slave port received a bus request with unsupported size: %d\n    at scratchpad_adapter.scala:70 assert (s1_slave_req.size <= 2.U, \"Slave port received a bus request with unsupported size: %%%%d\", s1_slave_req.size)\n", s1_slave_req_size);	// @[scratchpad_adapter.scala:38:29, :70:10]
        if (`STOP_COND_)	// @[scratchpad_adapter.scala:70:10]
          $fatal;	// @[scratchpad_adapter.scala:70:10]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        s1_slave_req_valid = _RANDOM_0[0];	// @[scratchpad_adapter.scala:36:35]
        s1_slave_cmd = _RANDOM_0[5:1];	// @[scratchpad_adapter.scala:36:35, :37:29]
        s1_slave_req_addr = {_RANDOM_0[31:6], _RANDOM_1[5:0]};	// @[scratchpad_adapter.scala:36:35, :38:29]
        s1_slave_req_size = _RANDOM_1[19:18];	// @[scratchpad_adapter.scala:38:29]
        io_slavePort_resp_valid_REG = _RANDOM_2[31];	// @[scratchpad_adapter.scala:54:33]
        io_slavePort_resp_bits_data_raw_REG = {_RANDOM_3[31:4], _RANDOM_4[3:0]};	// @[scratchpad_adapter.scala:58:32]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_slavePort_resp_valid = io_slavePort_resp_valid_REG;	// @[scratchpad_adapter.scala:54:33]
  assign io_slavePort_resp_bits_data_raw = io_slavePort_resp_bits_data_raw_REG;	// @[scratchpad_adapter.scala:58:32]
  assign io_memPort_req_valid = s1_slave_req_valid & (_io_memPort_req_bits_fcn_T | ~io_slavePort_s1_kill);	// @[scratchpad_adapter.scala:36:35, :53:{46,62,72,75}]
  assign io_memPort_req_bits_addr = s1_slave_req_addr;	// @[scratchpad_adapter.scala:38:29]
  assign io_memPort_req_bits_data = io_slavePort_s1_data_data;
  assign io_memPort_req_bits_fcn = ~_io_memPort_req_bits_fcn_T;	// @[scratchpad_adapter.scala:53:62, :66:33]
  assign io_memPort_req_bits_typ = {1'h1, s1_slave_req_size + 2'h1};	// @[Cat.scala:33:92, memory.scala:62:78, scratchpad_adapter.scala:38:29]
endmodule


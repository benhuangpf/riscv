$version Generated by VerilatedVcd $end
$date 2023年11月03日 (週五) 02時06分26秒 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 i clock $end
  $var wire 32 k io_addr [31:0] $end
  $var wire  1 r io_bundleCtrl_ctrlALUSrc $end
  $var wire  1 n io_bundleCtrl_ctrlBranch $end
  $var wire  1 s io_bundleCtrl_ctrlJAL $end
  $var wire  1 m io_bundleCtrl_ctrlJump $end
  $var wire  2 v io_bundleCtrl_ctrlLSType [1:0] $end
  $var wire  1 p io_bundleCtrl_ctrlLoad $end
  $var wire  4 t io_bundleCtrl_ctrlOP [3:0] $end
  $var wire  1 o io_bundleCtrl_ctrlRegWrite $end
  $var wire  1 u io_bundleCtrl_ctrlSigned $end
  $var wire  1 q io_bundleCtrl_ctrlStore $end
  $var wire 32 z io_imm [31:0] $end
  $var wire 32 l io_inst [31:0] $end
  $var wire 32 | io_result [31:0] $end
  $var wire 32 w io_resultALU [31:0] $end
  $var wire  1 { io_resultBranch $end
  $var wire 32 x io_rs1 [31:0] $end
  $var wire 32 y io_rs2 [31:0] $end
  $var wire  1 j reset $end
  $scope module Top $end
   $var wire  1 , alu_io_bundleAluControl_ctrlALUSrc $end
   $var wire  1 % alu_io_bundleAluControl_ctrlBranch $end
   $var wire  1 - alu_io_bundleAluControl_ctrlJAL $end
   $var wire  4 . alu_io_bundleAluControl_ctrlOP [3:0] $end
   $var wire  1 / alu_io_bundleAluControl_ctrlSigned $end
   $var wire 32 5 alu_io_dataRead1 [31:0] $end
   $var wire 32 6 alu_io_dataRead2 [31:0] $end
   $var wire 32 4 alu_io_imm [31:0] $end
   $var wire 32 # alu_io_pc [31:0] $end
   $var wire 32 7 alu_io_resultAlu [31:0] $end
   $var wire  1 & alu_io_resultBranch $end
   $var wire  1 i clock $end
   $var wire  1 , controller_io_bundleAluControl_ctrlALUSrc $end
   $var wire  1 % controller_io_bundleAluControl_ctrlBranch $end
   $var wire  1 - controller_io_bundleAluControl_ctrlJAL $end
   $var wire  4 . controller_io_bundleAluControl_ctrlOP [3:0] $end
   $var wire  1 / controller_io_bundleAluControl_ctrlSigned $end
   $var wire  1 , controller_io_bundleControlIn_ctrlALUSrc $end
   $var wire  1 % controller_io_bundleControlIn_ctrlBranch $end
   $var wire  1 - controller_io_bundleControlIn_ctrlJAL $end
   $var wire  1 $ controller_io_bundleControlIn_ctrlJump $end
   $var wire  1 * controller_io_bundleControlIn_ctrlLoad $end
   $var wire  4 . controller_io_bundleControlIn_ctrlOP [3:0] $end
   $var wire  1 ) controller_io_bundleControlIn_ctrlRegWrite $end
   $var wire  1 / controller_io_bundleControlIn_ctrlSigned $end
   $var wire  1 + controller_io_bundleControlIn_ctrlStore $end
   $var wire  1 % controller_io_bundleControlOut_ctrlBranch $end
   $var wire  1 $ controller_io_bundleControlOut_ctrlJump $end
   $var wire  1 ) controller_io_bundleControlOut_ctrlRegWrite $end
   $var wire  2 8 controller_io_bundleMemDataControl_ctrlLSType [1:0] $end
   $var wire  1 * controller_io_bundleMemDataControl_ctrlLoad $end
   $var wire  1 / controller_io_bundleMemDataControl_ctrlSigned $end
   $var wire  1 + controller_io_bundleMemDataControl_ctrlStore $end
   $var wire  1 , decoder_io_bundleCtrl_ctrlALUSrc $end
   $var wire  1 % decoder_io_bundleCtrl_ctrlBranch $end
   $var wire  1 - decoder_io_bundleCtrl_ctrlJAL $end
   $var wire  1 $ decoder_io_bundleCtrl_ctrlJump $end
   $var wire  2 0 decoder_io_bundleCtrl_ctrlLSType [1:0] $end
   $var wire  1 * decoder_io_bundleCtrl_ctrlLoad $end
   $var wire  4 . decoder_io_bundleCtrl_ctrlOP [3:0] $end
   $var wire  1 ) decoder_io_bundleCtrl_ctrlRegWrite $end
   $var wire  1 / decoder_io_bundleCtrl_ctrlSigned $end
   $var wire  1 + decoder_io_bundleCtrl_ctrlStore $end
   $var wire  5 3 decoder_io_bundleReg_rd [4:0] $end
   $var wire  5 1 decoder_io_bundleReg_rs1 [4:0] $end
   $var wire  5 2 decoder_io_bundleReg_rs2 [4:0] $end
   $var wire 32 4 decoder_io_imm [31:0] $end
   $var wire 32 ( decoder_io_inst [31:0] $end
   $var wire 32 k io_addr [31:0] $end
   $var wire  1 r io_bundleCtrl_ctrlALUSrc $end
   $var wire  1 n io_bundleCtrl_ctrlBranch $end
   $var wire  1 s io_bundleCtrl_ctrlJAL $end
   $var wire  1 m io_bundleCtrl_ctrlJump $end
   $var wire  2 v io_bundleCtrl_ctrlLSType [1:0] $end
   $var wire  1 p io_bundleCtrl_ctrlLoad $end
   $var wire  4 t io_bundleCtrl_ctrlOP [3:0] $end
   $var wire  1 o io_bundleCtrl_ctrlRegWrite $end
   $var wire  1 u io_bundleCtrl_ctrlSigned $end
   $var wire  1 q io_bundleCtrl_ctrlStore $end
   $var wire 32 z io_imm [31:0] $end
   $var wire 32 l io_inst [31:0] $end
   $var wire 32 | io_result [31:0] $end
   $var wire 32 w io_resultALU [31:0] $end
   $var wire  1 { io_resultBranch $end
   $var wire 32 x io_rs1 [31:0] $end
   $var wire 32 y io_rs2 [31:0] $end
   $var wire  1 i memData_clock $end
   $var wire  2 8 memData_io_bundleMemDataControl_ctrlLSType [1:0] $end
   $var wire  1 * memData_io_bundleMemDataControl_ctrlLoad $end
   $var wire  1 / memData_io_bundleMemDataControl_ctrlSigned $end
   $var wire  1 + memData_io_bundleMemDataControl_ctrlStore $end
   $var wire 32 6 memData_io_dataStore [31:0] $end
   $var wire 32 ' memData_io_result [31:0] $end
   $var wire 32 7 memData_io_resultALU [31:0] $end
   $var wire  1 i memInst_clock $end
   $var wire 32 # memInst_io_addr [31:0] $end
   $var wire 32 ( memInst_io_inst [31:0] $end
   $var wire  1 i pcReg_clock $end
   $var wire 32 # pcReg_io_addrOut [31:0] $end
   $var wire 32 ' pcReg_io_addrTarget [31:0] $end
   $var wire  1 % pcReg_io_ctrlBranch $end
   $var wire  1 $ pcReg_io_ctrlJump $end
   $var wire  1 & pcReg_io_resultBranch $end
   $var wire  1 j pcReg_reset $end
   $var wire  1 i registers_clock $end
   $var wire  5 3 registers_io_bundleReg_rd [4:0] $end
   $var wire  5 1 registers_io_bundleReg_rs1 [4:0] $end
   $var wire  5 2 registers_io_bundleReg_rs2 [4:0] $end
   $var wire  1 $ registers_io_ctrlJump $end
   $var wire  1 ) registers_io_ctrlRegWrite $end
   $var wire 32 5 registers_io_dataRead1 [31:0] $end
   $var wire 32 6 registers_io_dataRead2 [31:0] $end
   $var wire 32 ' registers_io_dataWrite [31:0] $end
   $var wire 32 # registers_io_pc [31:0] $end
   $var wire  1 j reset $end
   $scope module alu $end
    $var wire  1 , io_bundleAluControl_ctrlALUSrc $end
    $var wire  1 % io_bundleAluControl_ctrlBranch $end
    $var wire  1 - io_bundleAluControl_ctrlJAL $end
    $var wire  4 . io_bundleAluControl_ctrlOP [3:0] $end
    $var wire  1 / io_bundleAluControl_ctrlSigned $end
    $var wire 32 5 io_dataRead1 [31:0] $end
    $var wire 32 6 io_dataRead2 [31:0] $end
    $var wire 32 4 io_imm [31:0] $end
    $var wire 32 # io_pc [31:0] $end
    $var wire 32 7 io_resultAlu [31:0] $end
    $var wire  1 & io_resultBranch $end
    $var wire 32 9 oprand1 [31:0] $end
    $var wire 32 : oprand2 [31:0] $end
   $upscope $end
   $scope module controller $end
    $var wire  1 , io_bundleAluControl_ctrlALUSrc $end
    $var wire  1 % io_bundleAluControl_ctrlBranch $end
    $var wire  1 - io_bundleAluControl_ctrlJAL $end
    $var wire  4 . io_bundleAluControl_ctrlOP [3:0] $end
    $var wire  1 / io_bundleAluControl_ctrlSigned $end
    $var wire  1 , io_bundleControlIn_ctrlALUSrc $end
    $var wire  1 % io_bundleControlIn_ctrlBranch $end
    $var wire  1 - io_bundleControlIn_ctrlJAL $end
    $var wire  1 $ io_bundleControlIn_ctrlJump $end
    $var wire  1 * io_bundleControlIn_ctrlLoad $end
    $var wire  4 . io_bundleControlIn_ctrlOP [3:0] $end
    $var wire  1 ) io_bundleControlIn_ctrlRegWrite $end
    $var wire  1 / io_bundleControlIn_ctrlSigned $end
    $var wire  1 + io_bundleControlIn_ctrlStore $end
    $var wire  1 % io_bundleControlOut_ctrlBranch $end
    $var wire  1 $ io_bundleControlOut_ctrlJump $end
    $var wire  1 ) io_bundleControlOut_ctrlRegWrite $end
    $var wire  2 8 io_bundleMemDataControl_ctrlLSType [1:0] $end
    $var wire  1 * io_bundleMemDataControl_ctrlLoad $end
    $var wire  1 / io_bundleMemDataControl_ctrlSigned $end
    $var wire  1 + io_bundleMemDataControl_ctrlStore $end
   $upscope $end
   $scope module decoder $end
    $var wire 32 = imm_b [31:0] $end
    $var wire 32 ; imm_i [31:0] $end
    $var wire 33 ? imm_j [32:0] $end
    $var wire 32 < imm_s [31:0] $end
    $var wire 32 A imm_shamt [31:0] $end
    $var wire 32 > imm_u [31:0] $end
    $var wire  1 , io_bundleCtrl_ctrlALUSrc $end
    $var wire  1 % io_bundleCtrl_ctrlBranch $end
    $var wire  1 - io_bundleCtrl_ctrlJAL $end
    $var wire  1 $ io_bundleCtrl_ctrlJump $end
    $var wire  2 0 io_bundleCtrl_ctrlLSType [1:0] $end
    $var wire  1 * io_bundleCtrl_ctrlLoad $end
    $var wire  4 . io_bundleCtrl_ctrlOP [3:0] $end
    $var wire  1 ) io_bundleCtrl_ctrlRegWrite $end
    $var wire  1 / io_bundleCtrl_ctrlSigned $end
    $var wire  1 + io_bundleCtrl_ctrlStore $end
    $var wire  5 3 io_bundleReg_rd [4:0] $end
    $var wire  5 1 io_bundleReg_rs1 [4:0] $end
    $var wire  5 2 io_bundleReg_rs2 [4:0] $end
    $var wire 32 4 io_imm [31:0] $end
    $var wire 32 ( io_inst [31:0] $end
   $upscope $end
   $scope module memData $end
    $var wire  1 i clock $end
    $var wire 32 C dataLoad [31:0] $end
    $var wire  2 8 io_bundleMemDataControl_ctrlLSType [1:0] $end
    $var wire  1 * io_bundleMemDataControl_ctrlLoad $end
    $var wire  1 / io_bundleMemDataControl_ctrlSigned $end
    $var wire  1 + io_bundleMemDataControl_ctrlStore $end
    $var wire 32 6 io_dataStore [31:0] $end
    $var wire 32 ' io_result [31:0] $end
    $var wire 32 7 io_resultALU [31:0] $end
    $var wire 10 B mem_MPORT_1_addr [9:0] $end
    $var wire 32 D mem_MPORT_1_data [31:0] $end
    $var wire  1 E mem_MPORT_1_en $end
    $var wire  1 } mem_MPORT_1_mask $end
    $var wire 10 B mem_MPORT_2_addr [9:0] $end
    $var wire 32 F mem_MPORT_2_data [31:0] $end
    $var wire  1 G mem_MPORT_2_en $end
    $var wire  1 } mem_MPORT_2_mask $end
    $var wire 10 B mem_MPORT_addr [9:0] $end
    $var wire 32 6 mem_MPORT_data [31:0] $end
    $var wire  1 ~ mem_MPORT_en $end
    $var wire  1 } mem_MPORT_mask $end
    $var wire 10 B mem_dataLoad_MPORT_addr [9:0] $end
    $var wire 32 C mem_dataLoad_MPORT_data [31:0] $end
    $var wire  1 } mem_dataLoad_MPORT_en $end
   $upscope $end
   $scope module memInst $end
    $var wire  1 i clock $end
    $var wire 32 # io_addr [31:0] $end
    $var wire 32 ( io_inst [31:0] $end
    $var wire 10 H mem_io_inst_MPORT_addr [9:0] $end
    $var wire 32 ( mem_io_inst_MPORT_data [31:0] $end
    $var wire  1 } mem_io_inst_MPORT_en $end
   $upscope $end
   $scope module pcReg $end
    $var wire  1 i clock $end
    $var wire 32 # io_addrOut [31:0] $end
    $var wire 32 ' io_addrTarget [31:0] $end
    $var wire  1 % io_ctrlBranch $end
    $var wire  1 $ io_ctrlJump $end
    $var wire  1 & io_resultBranch $end
    $var wire 32 # regPC [31:0] $end
    $var wire  1 j reset $end
   $upscope $end
   $scope module registers $end
    $var wire  1 i clock $end
    $var wire  5 3 io_bundleReg_rd [4:0] $end
    $var wire  5 1 io_bundleReg_rs1 [4:0] $end
    $var wire  5 2 io_bundleReg_rs2 [4:0] $end
    $var wire  1 $ io_ctrlJump $end
    $var wire  1 ) io_ctrlRegWrite $end
    $var wire 32 5 io_dataRead1 [31:0] $end
    $var wire 32 6 io_dataRead2 [31:0] $end
    $var wire 32 ' io_dataWrite [31:0] $end
    $var wire 32 # io_pc [31:0] $end
    $var wire 32 I regs_0 [31:0] $end
    $var wire 32 J regs_1 [31:0] $end
    $var wire 32 S regs_10 [31:0] $end
    $var wire 32 T regs_11 [31:0] $end
    $var wire 32 U regs_12 [31:0] $end
    $var wire 32 V regs_13 [31:0] $end
    $var wire 32 W regs_14 [31:0] $end
    $var wire 32 X regs_15 [31:0] $end
    $var wire 32 Y regs_16 [31:0] $end
    $var wire 32 Z regs_17 [31:0] $end
    $var wire 32 [ regs_18 [31:0] $end
    $var wire 32 \ regs_19 [31:0] $end
    $var wire 32 K regs_2 [31:0] $end
    $var wire 32 ] regs_20 [31:0] $end
    $var wire 32 ^ regs_21 [31:0] $end
    $var wire 32 _ regs_22 [31:0] $end
    $var wire 32 ` regs_23 [31:0] $end
    $var wire 32 a regs_24 [31:0] $end
    $var wire 32 b regs_25 [31:0] $end
    $var wire 32 c regs_26 [31:0] $end
    $var wire 32 d regs_27 [31:0] $end
    $var wire 32 e regs_28 [31:0] $end
    $var wire 32 f regs_29 [31:0] $end
    $var wire 32 L regs_3 [31:0] $end
    $var wire 32 g regs_30 [31:0] $end
    $var wire 32 h regs_31 [31:0] $end
    $var wire 32 M regs_4 [31:0] $end
    $var wire 32 N regs_5 [31:0] $end
    $var wire 32 O regs_6 [31:0] $end
    $var wire 32 P regs_7 [31:0] $end
    $var wire 32 Q regs_8 [31:0] $end
    $var wire 32 R regs_9 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
0$
0%
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
1)
1*
0+
1,
0-
b0001 .
1/
b00 0
b00000 1
b00000 2
b00000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b01 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b000000000000000000000000000000000 ?
b00000000000000000000000000000000 A
b0000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
0E
b00000000000000000000000000000000 F
0G
b0000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
0i
1j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
0m
0n
1o
1p
0q
1r
0s
b0001 t
1u
b00 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
0{
b00000000000000000000000000000000 |
1}
0~
#1
b00000000000000000000000010000100 #
b0000100001 H
1i
b00000000000000000000000010000100 k
